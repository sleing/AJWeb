/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50738
Source Host           : localhost:3306
Source Database       : simple

Target Server Type    : MYSQL
Target Server Version : 50738
File Encoding         : 65001

Date: 2022-10-03 22:07:03
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for course
-- ----------------------------
DROP TABLE IF EXISTS `course`;
CREATE TABLE `course` (
  `no` varchar(50) DEFAULT NULL,
  `name` varchar(50) DEFAULT NULL,
  `hours` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of course
-- ----------------------------
INSERT INTO `course` VALUES ('001', '数学', '32');
INSERT INTO `course` VALUES ('002', '哲学', '48');
INSERT INTO `course` VALUES ('004', '语文', '48');
INSERT INTO `course` VALUES ('005', '英语', '48');
INSERT INTO `course` VALUES ('006', '日语', '48');
INSERT INTO `course` VALUES ('007', '高级Java', '47');

-- ----------------------------
-- Table structure for student
-- ----------------------------
DROP TABLE IF EXISTS `student`;
CREATE TABLE `student` (
  `id` int(11) DEFAULT NULL,
  `name` varchar(50) DEFAULT NULL,
  `age` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of student
-- ----------------------------
INSERT INTO `student` VALUES ('1001', '张三', '18');
INSERT INTO `student` VALUES ('1002', '李四', '17');

-- ----------------------------
-- Table structure for student_grade
-- ----------------------------
DROP TABLE IF EXISTS `student_grade`;
CREATE TABLE `student_grade` (
  `student_id` int(11) DEFAULT NULL,
  `course_no` varchar(50) DEFAULT NULL,
  `grade` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of student_grade
-- ----------------------------
INSERT INTO `student_grade` VALUES ('1001', '001', '80');
INSERT INTO `student_grade` VALUES ('1001', '002', '70');
INSERT INTO `student_grade` VALUES ('1002', '002', '90');

-- ----------------------------
-- Table structure for test
-- ----------------------------
DROP TABLE IF EXISTS `test`;
CREATE TABLE `test` (
  `ddd` int(255) NOT NULL AUTO_INCREMENT,
  `script` longtext,
  PRIMARY KEY (`ddd`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of test
-- ----------------------------
INSERT INTO `test` VALUES ('1', 'import cn.afterturn.easypoi.excel.ExcelImportUtil\r\nimport cn.afterturn.easypoi.excel.entity.ImportParams\r\nimport cn.hutool.core.util.NumberUtil\r\nimport com.ddd.info.dcm.dto.modelManage.ErrResultVueRule\r\nimport com.ddd.info.dcm.entity.debtCommitteeManage.DebtCommittee\r\nimport com.ddd.info.dcm.entity.debtCommitteeManage.DebtCommitteeMember\r\nimport com.ddd.info.dcm.entity.modelManage.Model\r\nimport com.ddd.info.dcm.entity.modelManage.ModelItem\r\nimport com.ddd.info.dcm.service.billManage.impl.MapImportHandler\r\nimport com.ddd.info.dcm.utils.ImportLogErrResult\r\nimport com.ddd.info.dcm.utils.ImportLogErrResultGenerator\r\nimport com.ddd.info.dcm.utils.MapUtil\r\nimport com.ddd.info.dcm.utils.convert.ErrResult2VueRuleConvertor\r\nimport com.ddd.info.dcm.utils.convert.JsonConvertor\r\nimport com.ddd.info.dcm.utils.metadata.Mysql5_7Info\r\nimport com.ddd.info.simple.DDDException\r\nimport com.ddd.info.simple.entity.organization.Organization\r\nimport com.ddd.info.simple.entity.permission.LoginUser\r\nimport com.ddd.info.simple.util.DateUtil\r\nimport org.apache.commons.lang.StringUtils\r\n\r\nimport java.text.DecimalFormat\r\nimport java.util.concurrent.ConcurrentHashMap\r\nimport java.util.function.Function\r\nimport java.util.regex.Matcher\r\nimport java.util.regex.Pattern\r\nimport java.util.stream.Collectors\r\n\r\n\r\nclass DCM {\r\n    def groovyService\r\n\r\n    /**\r\n     * 现目前resultMap中存的键主要有：\r\n     * 填报项目编号\r\n     * 导入成功条数\r\n     * 导入失败条数\r\n     * 导入警告条数\r\n     * 导入错误\r\n     */\r\n    Map<String,Object> resultMap = new HashMap<>();\r\n\r\n    def insertBefore(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n    def insertAfter(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    def updateBefore(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n    def updateAfter(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n    def deleteBefore(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n    def deleteAfter(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n    def submitBefore(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n    def submitAfter(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    def unsubmitBefore(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n    def unsubmitAfter(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    def checkBefore(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n    def checkAfter(Long modelId,Long billId)\r\n    {\r\n        Map bill = this.groovyService.findBill(modelId,billId);\r\n        String sql=\"update dcm_debt_committee t set t.financing_balance=\"+ bill.get(\"债委会成员企业情况_全口径融资余额\")+\"  where t.eid =\"+bill.get(\"债委会编号\");\r\n        println(sql);\r\n        groovyService.genericUpdateSql(sql);\r\n        return true;\r\n    }\r\n    def uncheckBefore(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n    def uncheckAfter(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    def importProjectBills(String importType,Long billProjectId, InputStream data){\r\n        StringBuilder out = new StringBuilder();\r\n        try{\r\n            //开始时间\r\n            Long startTime = System.currentTimeMillis();\r\n\r\n            //初始化返回的map，将主要信息填充到其中\r\n            resultMap.put(\"填报项目编号\",billProjectId)\r\n            resultMap.put(\"导入总计数量\",0)\r\n            resultMap.put(\"导入失败条数\",0)\r\n            resultMap.put(\"导入成功条数\",0)\r\n            resultMap.put(\"导入警告条数\",0)\r\n            resultMap.put(\"导入错误\",new ArrayList<ImportLogErrResult>())\r\n\r\n\r\n            //对导入类型进行判断，是主表还是子表\r\n            importType == \"parent\" ? importParentProjectBills(billProjectId,data,out) : importChildProjectBills(billProjectId,data,out);\r\n\r\n            resultMap.put(\"导入总计耗时\",(System.currentTimeMillis()-startTime)/1000)\r\n            //out.append(\"导入总计耗时：\").append((System.currentTimeMillis()-startTime)/1000).append(\" 秒\")\r\n        }catch(Exception e){\r\n            //out.append(ex2String(e));\r\n            throw new DDDException(\"错误原因是：\"+ex2String(e))\r\n//            resultMap.put(\"异常错误\",\"导入存在异常，请联系管理员！\");\r\n        }\r\n        return resultMap;\r\n    }\r\n\r\n    def ex2String(Throwable t) {\r\n        StringWriter sw = new StringWriter();\r\n        t.printStackTrace(new PrintWriter(sw, true));\r\n        return sw.getBuffer().toString();\r\n    }\r\n\r\n    /**\r\n     * 导入子表的填报\r\n     * @param billProjectId 填报项目ID\r\n     * @param data 数据流\r\n     * @param out 输出到屏幕\r\n     * @return 返回out\r\n     */\r\n    def importChildProjectBills(Long billProjectId, InputStream data,StringBuilder out){\r\n\r\n\r\n\r\n        ImportParams params = new ImportParams();\r\n        params.setTitleRows(3);\r\n        params.setHeadRows(1);\r\n        params.setDataHandler(new MapImportHandler());\r\n        long start = new Date().getTime();\r\n\r\n        List<Map<String, Object>> list = null;\r\n        try {\r\n            list = ExcelImportUtil.importExcel(data, Map.class, params);\r\n        } catch (Exception e) {\r\n            throw new DDDException(\"读取excel文件出错，原因：\" + e.getMessage());\r\n        }\r\n\r\n        if (list.size()==0||list==null){\r\n            //resultMap.put(\"导入错误\",\"该表格中无数据，请添加数据后再导入\\n\")\r\n            throw new DDDException(\"该表格中无数据，请添加数据后再导入\")\r\n            //out.append(\"该表格中无数据，请添加数据后再导入\\n\")\r\n        }\r\n\r\n        resultMap.put(\"导入总计数量\",list.size());\r\n\r\n        Map fieldMap = new HashMap();\r\n        fieldMap.put(\"债委会名称\",\"债委会名称\");\r\n        fieldMap.put(\"单位名称\",\"单位名称\");\r\n        fieldMap.put(\"债委会成员企业情况_全口径融资余额万元\",\"债委会成员企业情况_全口径融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_其中辖内融资余额万元\",\"债委会成员企业情况_其中辖内融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_其中辖外融资余额万元\",\"债委会成员企业情况_其中辖外融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_逾期余额万元\",\"债委会成员企业情况_逾期余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_不良余额万元\",\"债委会成员企业情况_不良余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_全口径融资余额成立时万元\",\"债委会成员企业情况_全口径融资余额成立时万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_增贷金额万元\",\"债委会工作情况本年度累计_成效_增贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_续贷金额万元\",\"债委会工作情况本年度累计_成效_续贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_减贷金额万元\",\"债委会工作情况本年度累计_成效_减贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_费用减免金额万元\",\"债委会工作情况本年度累计_成效_费用减免金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_债务重组_落地债务重组金额万元\",\"债委会工作情况本年度累计_债务重组_落地债务重组金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_债务重组_落地债转股金额万元\",\"债委会工作情况本年度累计_债务重组_落地债转股金额万元\");\r\n        fieldMap.put(\"状态\",\"状态\");\r\n        fieldMap.put(\"填报项目编号\",\"填报项目编号\");\r\n        fieldMap.put(\"导入日志\",\"导入日志\");\r\n\r\n        String findModelNameSql = \"select model_id from dcm_bill_project where eid = \" + billProjectId;\r\n        Long modelId = (groovyService.genericSelectSql(findModelNameSql)).get(0).get(\"model_id\");\r\n\r\n        Model model = groovyService.getModel(modelId);\r\n        Model childModel = groovyService.getModel(model.getChildren().get(0).getId())\r\n\r\n        String sql  = \"update \" + childModel.getModelName() + \" set \" +\r\n                \"债委会成员企业情况_全口径融资余额万元 = \\${债委会成员企业情况_全口径融资余额万元},\" +\r\n                \"债委会成员企业情况_其中辖内融资余额万元 = \\${债委会成员企业情况_其中辖内融资余额万元},债委会成员企业情况_其中辖外融资余额万元 = \\${债委会成员企业情况_其中辖外融资余额万元},\" +\r\n                \"债委会成员企业情况_逾期余额万元 = \\${债委会成员企业情况_逾期余额万元},债委会成员企业情况_不良余额万元 = \\${债委会成员企业情况_不良余额万元},\" +\r\n                \"债委会成员企业情况_全口径融资余额成立时万元 = \\${债委会成员企业情况_全口径融资余额成立时万元},\" +\r\n                \"债委会工作情况本年度累计_成效_增贷金额万元 = \\${债委会工作情况本年度累计_成效_增贷金额万元},债委会工作情况本年度累计_成效_续贷金额万元 = \\${债委会工作情况本年度累计_成效_续贷金额万元},\" +\r\n                \"债委会工作情况本年度累计_成效_减贷金额万元 = \\${债委会工作情况本年度累计_成效_减贷金额万元},债委会工作情况本年度累计_成效_费用减免金额万元 = \\${债委会工作情况本年度累计_成效_费用减免金额万元},\" +\r\n                \"债委会工作情况本年度累计_债务重组_落地债务重组金额万元 = \\${债委会工作情况本年度累计_债务重组_落地债务重组金额万元},债委会工作情况本年度累计_债务重组_落地债转股金额万元 = \\${债委会工作情况本年度累计_债务重组_落地债转股金额万元},\" +\r\n                \"状态 = \\${状态},导入日志 = \\${导入日志} where 父填报编号 = \\${父填报编号} and 单位名称 = \\${单位名称} and 状态 not in (\'已审核\')\";\r\n\r\n        List<Map<String, Object>> newList  = new ArrayList();\r\n        for (Map<String, Object> item : list) {\r\n            Map  newItem = new HashMap<>();\r\n            for(String key : fieldMap.keySet()){\r\n                if (\"状态\".equals(key)){\r\n                    item.put(\"状态\",\"未开始填报\")\r\n                } else if (\"填报项目编号\".equals(key)){\r\n                    item.put(\"填报项目编号\",billProjectId)\r\n                }\r\n\r\n                Object value = item.get(key);\r\n\r\n                newItem.put(fieldMap.get(key),value);\r\n\r\n            }\r\n            newList.add(newItem);\r\n        }\r\n\r\n        //查询出所有的债委会\r\n        Map<String,DebtCommittee> debtCommitteeMap = debtCommitteeMap();\r\n\r\n        //查出所有的单位\r\n        Map<String,Organization> organizationMap = organizationMap();\r\n\r\n\r\n        newList = checkMulDuplicate(newList,params,out,\"债委会名称\",\"单位名称\");\r\n\r\n        if (newList.size() == 0){\r\n            throw new DDDException(\"本次导入无正确数据，请修改正确后重新导入\");\r\n            //out.append(\"本次导入无正确数据，请修改正确后重新导入\\n\")\r\n//            return out\r\n        }\r\n\r\n        //在此处查是否存在，后续所有的编号都使用行号来输出\r\n        List<Map<String,Object>> newRightList = new ArrayList<>();\r\n        for (int j = 0;j<newList.size();j++) {\r\n            Map<String,Object> newItem = hasExistDebtCommitteeForChild(debtCommitteeMap,organizationMap,out,newList.get(j));\r\n            if (newItem!=null){\r\n                newRightList.add(newItem);\r\n            }\r\n        }\r\n\r\n        //1.读取到的数据首先需要检查债委会是否存在\r\n        //2.对导入的数据进行状态验证，如果是已审核的数据，则不允许再覆盖\r\n        //3.对于不存在的成员单位，需要直接创建，债委会原来的验证不再需要\r\n        list = dataVerification((params.getTitleRows()+params.getHeadRows()),newRightList,out,childModel);\r\n\r\n        //数据校验后，需要检查该成员单位在该债委会中是否存在，如果不存在，则创建成员单位，并创建填报记录\r\n\r\n        //使用Java8的流对债委会名称进行分组\r\n        Map<Object,List<Map<String,Object>>> groupByDebtCommitteeNameMap = list.stream().collect(Collectors.groupingBy(new Function<Map<String,Object>, Object>() {\r\n            @Override\r\n            Object apply(Map<String,Object> t) {\r\n                return t.get(\"债委会名称\");\r\n            }\r\n        }))\r\n\r\n        //1.首先从数据库进行查询，导入的单位是否存在，若不存在，则提示，若存在，则创建成员单位\r\n\r\n        List<ConcurrentHashMap> allBanks = groovyService.findAllBinkWithEmployee();\r\n        //这里的name是指的Organization这一张表中的名称的字段\r\n        Set<String> localBankNames = allBanks.stream()\r\n                .map({e -> e.get(\"name\")})\r\n                .collect(Collectors.toSet());\r\n\r\n        //分组后的一个set集合\r\n        Set<Object> modifiedKeySet = groupByDebtCommitteeNameMap.keySet();\r\n        //2.创建成员单位进行批量创建，需要new成员单位对象，此时需要查询单位的默认经办人\r\n        List<DebtCommitteeMember> debtCommitteeMembers = new ArrayList<>();\r\n        for (Object j : modifiedKeySet){\r\n            Set<String> excelBankNames = groupByDebtCommitteeNameMap.get(j).stream()\r\n                    .map({e -> e.get(\"单位名称\")})\r\n                    .collect(Collectors.toSet());\r\n\r\n            //求差集，过滤掉那些没有的单位\r\n            //差集集合\r\n            Set<String> summaryDifferenceSet = new HashSet<>();\r\n            summaryDifferenceSet.addAll(excelBankNames)\r\n            summaryDifferenceSet.removeAll(localBankNames)\r\n\r\n            //求交集，证明这些都存在于数据库中，可以直接创建成员单位\r\n            //交集集合\r\n            Set<String> summaryIntersectionSet = new HashSet<>();\r\n            summaryIntersectionSet.addAll(excelBankNames)\r\n            summaryIntersectionSet.retainAll(localBankNames)\r\n\r\n            //将存在的金融机构过滤出来，创建成员单位\r\n            List<ConcurrentHashMap> filterBanks = allBanks.stream()\r\n                    .filter({e -> summaryIntersectionSet.contains(e.get(\"name\"))})\r\n                    .collect(Collectors.toList());\r\n\r\n            //根据债委会名称查询id\r\n            DebtCommittee debtCommittee = groovyService.findDebtCommitteesWithIdNameByStatus(j)\r\n\r\n            for (ConcurrentHashMap i : filterBanks){\r\n                //查询该成员单位是否存在于成员单位表中，若存在，则不创建，若不存在，才创建\r\n                DebtCommitteeMember d = groovyService.findDebtCommitteeMemberByDebtCommitteeAndMemberAgency(debtCommittee.getEId(),i.get(\"eid\"),null);\r\n\r\n                if (d == null) {\r\n                    //获取到对应成员单位的那一条数据\r\n                    Map<String,Object> importMemberData = groupByDebtCommitteeNameMap.get(j).stream()\r\n                            .filter({e -> e.get(\"单位名称\") == i.get(\"name\")})\r\n                            .findFirst().orElse(null);\r\n\r\n                    LoginUser loginUser = groovyService.getCurrLoginUser();\r\n\r\n                    if (importMemberData!=null) {\r\n                        DebtCommitteeMember debtCommitteeMember = new DebtCommitteeMember();\r\n                        debtCommitteeMember.setDebtCommitteeId(debtCommittee.getEId());\r\n                        debtCommitteeMember.setDebtCommitteeName(debtCommittee.getDebtCommitteeName());\r\n                        debtCommitteeMember.setOrganizationId(loginUser.getCurrentOrganization().getEId())\r\n                        debtCommitteeMember.setIsChairman(\"否\")\r\n                        debtCommitteeMember.setJoinDate(new Date())\r\n                        debtCommitteeMember.setFinancing(String.valueOf(importMemberData.get(\"债委会成员企业情况_全口径融资余额万元\")))\r\n                        debtCommitteeMember.setMemberAgencyId(i.get(\"eid\") as Long)\r\n                        debtCommitteeMember.setMemberAgencyName(i.get(\"name\") as String)\r\n                        debtCommitteeMember.setResponsibleOrganizationId(i.get(\"eid\") as Long)\r\n                        debtCommitteeMember.setResponsibleOrganizationName(i.get(\"name\") as String)\r\n                        debtCommitteeMember.setContactWay(i.get(\"reporter_link_tel\") as String)\r\n                        debtCommitteeMember.setReporterId(i.get(\"reporter_id\") as Long)\r\n                        debtCommitteeMember.setReporterName(i.get(\"reporter_name\") as String)\r\n                        debtCommitteeMember.setStatus(\"存续\")\r\n\r\n                        debtCommitteeMembers.add(debtCommitteeMember);\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        groovyService.bulkSaveDebtCommitteeMemberAgency(debtCommitteeMembers);\r\n\r\n        Map<String,ConcurrentHashMap> tempMap = new HashMap<>();\r\n\r\n        Set<Object> keySets = groupByDebtCommitteeNameMap.keySet();\r\n        for (Object i : keySets) {\r\n            //3.查询父填报的所有信息，然后存入一个map，传入创建子填报的方法\r\n            String findParentBillSql = \"select t0.编号,t0.债委会编号,t0.债委会名称,\" +\r\n                    \"t0.单位编号,t0.单位名称,t0.责任单位编号,t0.责任单位名称,t0.经办人,t0.经办人编号,\" +\r\n                    \"t0.审核人,t0.审核人编号,t0.填报项目名称,t0.填报项目编号,t0.填报开始时间,t0.填报截止时间 \" +\r\n                    \"from \" + model.getModelName() + \" t0 where t0.填报项目编号 = \" + billProjectId +\r\n                    \" and t0.债委会名称 = \'\" + i + \"\'\";\r\n            List<ConcurrentHashMap> parentBillList = groovyService.genericSelectSql(findParentBillSql);\r\n\r\n            tempMap.put(i as String,parentBillList.get(0));\r\n            //4.创建完成员单位后，再创建填报，调用创建子填报的方法\r\n            groovyService.createCommitteeMember(parentBillList.get(0),childModel,false);\r\n        }\r\n        //5.最后再更新所有的成员单位的数据\r\n        for (Map<String, Object> item : list) {\r\n            try{\r\n                item.put(\"父填报编号\",tempMap.get(item.get(\"债委会名称\")).get(\"编号\"));\r\n                String sql1= groovyService.resolveByMapForSQL(sql,item);\r\n                groovyService.genericUpdateSql(sql1);\r\n            }catch(Exception ignored){\r\n                out.append(\"错误原因为：\").append(ignored.getMessage())\r\n            }\r\n        }\r\n\r\n\r\n        //return out;\r\n    }\r\n\r\n\r\n    def hasExistDebtCommitteeForChild(Map<String,DebtCommittee> debtCommitteeMap,Map<String,Organization> organizationMap,StringBuilder out,Map<String,Object> item){\r\n\r\n        LoginUser loginUser = groovyService.getCurrLoginUser();\r\n\r\n        String errStr;\r\n\r\n        //检查债委会是否存在的\r\n        if (debtCommitteeMap.get(item.get(\"债委会名称\"))==null){\r\n            out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，名称为：\")\r\n                    .append(item.get(\"债委会名称\")).append(\" 的债委会不存在，请检查！\\n\");\r\n            errStr =  \"第\" + item.get(\"行号\") +\" 行，名称为：\" + item.get(\"债委会名称\") + \" 的债委会不存在，请检查！\\n\";\r\n            resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n            return null;\r\n        }\r\n\r\n        //检查单位是否存在的\r\n        if (organizationMap.get(item.get(\"单位名称\"))==null){\r\n            out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，名称为：\")\r\n                    .append(item.get(\"单位名称\")).append(\" 的单位不存在，请检查！\\n\");\r\n            errStr = \"第 \" + item.get(\"行号\") + \" 行，名称为：\" + item.get(\"单位名称\") + \" 的单位不存在，请检查！\\n\";\r\n            resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n            return null;\r\n        }\r\n\r\n        if (currLoginUserIsReporter()) {\r\n            //检查当前导入的债委会的主席单位是否是本单位\r\n            if (debtCommitteeMap.get(item.get(\"债委会名称\")).getChairmanAgencyName() != loginUser.getCurrentOrganization().getName()){\r\n                out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，名称为：\")\r\n                        .append(item.get(\"债委会名称\")).append(\" 的主席单位不是当前登录单位，请检查！\\n\");\r\n\r\n                errStr = \"第 \" + item.get(\"行号\") + \" 行，名称为：\" + item.get(\"债委会名称\") + \" 的主席单位不是当前登录单位，请检查！\\n\";\r\n                resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n                return null;\r\n            }else {\r\n                return item;\r\n            }\r\n        }else {\r\n            return item;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    def checkMulDuplicate(List<Map<String, Object>> list,ImportParams params,StringBuilder out,String...duplicates){\r\n        if (duplicates==null||duplicates.size()==0){\r\n            throw new DDDException(\"该查重字段不存在，请检查!\")\r\n        }\r\n\r\n        // 债委会和单位查重，此处主要用于附件1债委会季度报表表1\r\n        List<Map<String, Object>> resultList=new ArrayList<>(list.size());\r\n        Map<Object,Set<Integer>> collision = new HashMap<>();\r\n        Map<Object,Integer> init=new HashMap<>();\r\n        for (int i = 0;i < list.size();i++){\r\n            Object currName=getMulDuplicateValue(list.get(i),duplicates);\r\n            Integer currIndex=i+params.getHeadRows()+params.getTitleRows()+1;\r\n            Set<Integer> indexSet=collision.get(currName);\r\n            if (indexSet!=null){\r\n                indexSet.add(currIndex);\r\n                Integer index=init.get(currName);\r\n                if(index!=null) {\r\n                    resultList.removeIf({ map -> (getMulDuplicateValue(map,duplicates) == currName) });\r\n                    init.put(currName,null);\r\n                }\r\n            } else {\r\n                Set<Integer> set=new LinkedHashSet<>(1);\r\n                set.add(currIndex);\r\n                init.put(currName,currIndex);\r\n                collision.put(currName,set);\r\n                resultList.add(list.get(i));\r\n            }\r\n        }\r\n\r\n        Iterator iterator=collision.iterator();\r\n        while (iterator.hasNext()){\r\n            Map.Entry<Object,Set<Integer>> entry=iterator.next();\r\n            Set<Integer> indexSet=entry.value;\r\n            if(indexSet.size()>1){\r\n                out.append(\"第 \")\r\n                for(Integer i : indexSet){\r\n                    out.append(i+\"、\")\r\n                }\r\n                out.deleteCharAt(out.length()-1);\r\n                out.append(\" 行,名称为：\\\" \"+(entry.getKey() as String).replaceAll(\"_\",\"、\")+\" \\\" 的\")\r\n                for (String m : duplicates){\r\n                    out.append(m).append(\"、\");\r\n                }\r\n                out.deleteCharAt(out.length()-1);\r\n                out.append(\"重复，请处理后再导入，此次不导入\\n\");\r\n            }\r\n        }\r\n\r\n        return resultList;\r\n\r\n    }\r\n\r\n    //返回值，比如是查重 债委会名称：“xx债委会” 和单位名称：“xx单位”，此时就返回 “xx债委会_xx单位”\r\n    def getMulDuplicateValue(Map<String, Object> map,String...duplicates){\r\n\r\n        StringBuffer combinationName = new StringBuffer();\r\n\r\n        for (String m : duplicates){\r\n            combinationName.append(map.get(m)).append(\"_\");\r\n        }\r\n        combinationName.deleteCharAt(combinationName.length()-1);\r\n\r\n        return combinationName.toString();\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 导入主表的填报\r\n     * @param billProjectId 填报项目ID\r\n     * @param data 数据流\r\n     * @param out 输出到屏幕\r\n     * @return 返回out\r\n     */\r\n    def importParentProjectBills(Long billProjectId, InputStream data,StringBuilder out) {\r\n        //groovyService.resolveByMapForSQL(String sql ,Map data);\r\n\r\n//        StringBuilder out = new StringBuilder();\r\n//        Long startTime = System.currentTimeMillis();\r\n\r\n        ImportParams params = new ImportParams();\r\n        params.setTitleRows(3);\r\n        params.setHeadRows(1);\r\n        params.setDataHandler(new MapImportHandler());\r\n        long start = new Date().getTime();\r\n\r\n        List<Map<String, Object>> list = null;\r\n        try {\r\n            list = ExcelImportUtil.importExcel(data, Map.class, params);\r\n        } catch (Exception e) {\r\n            throw new DDDException(\"读取excel文件出错，原因：\" + e.getMessage());\r\n        }\r\n\r\n        if (list.size()==0||list==null){\r\n            throw new DDDException(\"该表格中无数据，请添加数据后再导入\")\r\n            //out.append(\"该表格中无数据，请添加数据后再导入\\n\")\r\n        }\r\n\r\n\r\n        resultMap.put(\"导入总计数量\",list.size());\r\n        //out.append(JSONUtil.toJsonPrettyStr(list))\r\n//        for(String key : list.get(0).keySet()){\r\n//            out.append(\"fieldMap.put(\\\"\").append(key).append(\"\\\",\\\"\").append(key).append(\"\\\");\\n\");\r\n//        }\r\n\r\n        Map fieldMap = new HashMap();\r\n        fieldMap.put(\"债委会名称\",\"债委会名称\");\r\n        fieldMap.put(\"单位名称\",\"单位名称\");\r\n        fieldMap.put(\"成员单位数量已加入\",\"成员单位数量已加入\");\r\n        fieldMap.put(\"设立时间\",\"设立时间\");\r\n        fieldMap.put(\"债委会分类\",\"债委会分类\");\r\n        fieldMap.put(\"债委会对策\",\"债委会对策\");\r\n        fieldMap.put(\"企业性质\",\"企业性质\");\r\n        fieldMap.put(\"实际控制人\",\"实际控制人\");\r\n        fieldMap.put(\"实际控制人唯一标识\",\"实际控制人唯一标识\");\r\n        fieldMap.put(\"主要所属行业\",\"主要所属行业\");\r\n        fieldMap.put(\"企业主要所在区域\",\"企业主要所在区域\");\r\n        fieldMap.put(\"是否完成债委会文本签约\",\"是否完成债委会文本签约\");\r\n        fieldMap.put(\"债委会成员企业情况_全口径融资余额万元\",\"债委会成员企业情况_全口径融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_其中辖内融资余额万元\",\"债委会成员企业情况_其中辖内融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_其中辖外融资余额万元\",\"债委会成员企业情况_其中辖外融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_逾期余额万元\",\"债委会成员企业情况_逾期余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_不良余额万元\",\"债委会成员企业情况_不良余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_全口径融资余额成立时万元\",\"债委会成员企业情况_全口径融资余额成立时万元\");\r\n        fieldMap.put(\"债委会成员企业情况_成员企业个人数量\",\"债委会成员企业情况_成员企业个人数量\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_会议情况_召开债委会次数\",\"债委会工作情况本年度累计_会议情况_召开债委会次数\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_会议情况_形成会议决议篇数\",\"债委会工作情况本年度累计_会议情况_形成会议决议篇数\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_增贷金额万元\",\"债委会工作情况本年度累计_成效_增贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_续贷金额万元\",\"债委会工作情况本年度累计_成效_续贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_减贷金额万元\",\"债委会工作情况本年度累计_成效_减贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_费用减免金额万元\",\"债委会工作情况本年度累计_成效_费用减免金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_债务重组_落地债务重组金额万元\",\"债委会工作情况本年度累计_债务重组_落地债务重组金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_债务重组_落地债转股金额万元\",\"债委会工作情况本年度累计_债务重组_落地债转股金额万元\");\r\n        fieldMap.put(\"责任机构_责任机构联系人\",\"责任机构_责任机构联系人\");\r\n        fieldMap.put(\"责任机构_联系方式\",\"责任机构_联系方式\");\r\n        fieldMap.put(\"状态\",\"状态\");\r\n        fieldMap.put(\"填报项目编号\",\"填报项目编号\");\r\n        fieldMap.put(\"导入日志\",\"导入日志\");\r\n        fieldMap.put(\"行号\",\"行号\");\r\n\r\n        String findModelNameSql = \"select model_id from dcm_bill_project where eid = \" + billProjectId;\r\n        Long modelId = (groovyService.genericSelectSql(findModelNameSql)).get(0).get(\"model_id\");\r\n\r\n        Model model = groovyService.getModel(modelId);\r\n\r\n        String sql  = \"update \" + model.getModelName() + \" set \" +\r\n                \"成员单位数量已加入 = \\${成员单位数量已加入},设立时间 = \\${设立时间},债委会分类 = \\${债委会分类},债委会对策 = \\${债委会对策},\" +\r\n                \"企业性质 = \\${企业性质},实际控制人 = \\${实际控制人},实际控制人唯一标识 = \\${实际控制人唯一标识},主要所属行业 = \\${主要所属行业},\" +\r\n                \"主席单位责任机构部室 = \\${主席单位责任机构部室},企业主要所在区域 = \\${企业主要所在区域},\" +\r\n                \"是否完成债委会文本签约 = \\${是否完成债委会文本签约},债委会成员企业情况_全口径融资余额万元 = \\${债委会成员企业情况_全口径融资余额万元},\" +\r\n                \"债委会成员企业情况_其中辖内融资余额万元 = \\${债委会成员企业情况_其中辖内融资余额万元},债委会成员企业情况_其中辖外融资余额万元 = \\${债委会成员企业情况_其中辖外融资余额万元},\" +\r\n                \"债委会成员企业情况_逾期余额万元 = \\${债委会成员企业情况_逾期余额万元},债委会成员企业情况_不良余额万元 = \\${债委会成员企业情况_不良余额万元},\" +\r\n                \"债委会成员企业情况_全口径融资余额成立时万元 = \\${债委会成员企业情况_全口径融资余额成立时万元},债委会成员企业情况_成员企业个人数量 = \\${债委会成员企业情况_成员企业个人数量},\" +\r\n                \"债委会工作情况本年度累计_会议情况_召开债委会次数 = \\${债委会工作情况本年度累计_会议情况_召开债委会次数},债委会工作情况本年度累计_会议情况_形成会议决议篇数 = \\${债委会工作情况本年度累计_会议情况_形成会议决议篇数},\" +\r\n                \"债委会工作情况本年度累计_成效_增贷金额万元 = \\${债委会工作情况本年度累计_成效_增贷金额万元},债委会工作情况本年度累计_成效_续贷金额万元 = \\${债委会工作情况本年度累计_成效_续贷金额万元},\" +\r\n                \"债委会工作情况本年度累计_成效_减贷金额万元 = \\${债委会工作情况本年度累计_成效_减贷金额万元},债委会工作情况本年度累计_成效_费用减免金额万元 = \\${债委会工作情况本年度累计_成效_费用减免金额万元},\" +\r\n                \"债委会工作情况本年度累计_债务重组_落地债务重组金额万元 = \\${债委会工作情况本年度累计_债务重组_落地债务重组金额万元},债委会工作情况本年度累计_债务重组_落地债转股金额万元 = \\${债委会工作情况本年度累计_债务重组_落地债转股金额万元},\" +\r\n                \"责任机构_责任机构联系人 = \\${责任机构_责任机构联系人},责任机构_联系方式 = \\${责任机构_联系方式},\" +\r\n                \"状态 = \\${状态},导入日志 = \\${导入日志} where 填报项目编号 = \\${填报项目编号} and 债委会名称 = \\${债委会名称} and 状态 not in (\'已审核\')\";\r\n\r\n        for(String key : fieldMap.keySet()) {\r\n            if (!(\"行号\".equals(key))&&!model.getModelItemsMap().get(fieldMap.get(key))) {\r\n                out.append(fieldMap.get(key)).append(\" is error\\n\")\r\n            }\r\n        }\r\n\r\n\r\n        List<Map<String, Object>> newList  = new ArrayList();\r\n        for (int i = 0;i<list.size();i++) {\r\n            Map  newItem = new HashMap<>();\r\n            for(String key : fieldMap.keySet()){\r\n                if (\"状态\".equals(key)){\r\n                    list.get(i).put(\"状态\",\"未开始填报\")\r\n                } else if (\"填报项目编号\".equals(key)){\r\n                    list.get(i).put(\"填报项目编号\",billProjectId)\r\n                } else if (\"行号\".equals(key)){\r\n                    list.get(i).put(\"行号\",(params.getHeadRows()+params.getTitleRows()+1+i))\r\n                }\r\n\r\n                Object value = list.get(i).get(key);\r\n\r\n                newItem.put(fieldMap.get(key),value);\r\n\r\n            }\r\n            newList.add(newItem);\r\n        }\r\n\r\n\r\n        //查询出所有的债委会\r\n        Map<String,DebtCommittee> debtCommitteeMap = debtCommitteeMap();\r\n\r\n        //查出所有的单位\r\n        Map<String,Organization> organizationMap = organizationMap();\r\n\r\n        // 附件1债委会季度报表表1特有查重\r\n        newList = checkDuplicate(\"债委会名称\",newList,params,out)\r\n\r\n        //在此处查是否存在，后续所有的编号都使用行号来输出\r\n        List<Map<String,Object>> newRightList = new ArrayList<>();\r\n        for (int j = 0;j<newList.size();j++) {\r\n            Map<String,Object> newItem = hasExistDebtCommitteeAndOrg(debtCommitteeMap,organizationMap,out,newList.get(j));\r\n            if (newItem!=null){\r\n                newRightList.add(newItem);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if (newRightList.size() == 0){\r\n            throw new DDDException(\"本次导入无正确数据，请修改正确后重新导入\")\r\n//            out.append(\"本次导入无正确数据，请修改正确后重新导入\\n\")\r\n//            return out\r\n        }\r\n\r\n        //1.读取到的数据首先需要检查债委会是否存在\r\n        //2.对导入的数据进行状态验证，如果是已审核的数据，则不允许再覆盖\r\n        //3.对于不存在的成员单位，需要直接创建，债委会原来的验证不再需要\r\n        list = dataVerification((params.getTitleRows()+params.getHeadRows()),newRightList,out,model);\r\n\r\n\r\n\r\n\r\n//        StringBuffer stringBuffer = new StringBuffer(50000);//1918\r\n//        Long startTime = System.currentTimeMillis();\r\n//        List<String> sqls=new ArrayList<>();\r\n//        for (Map<String, Object> item : list) {\r\n////            try{\r\n//                String sql1= groovyService.resolveByMapForSQL(sql,item);\r\n//                stringBuffer.append(sql1).append(\';\');\r\n//                if(stringBuffer.length()>=Mysql5_7Info.MAX_MESSAGE_SIZE){\r\n//                    sqls.add(stringBuffer.toString());\r\n//                    stringBuffer=new StringBuffer();\r\n//                }\r\n////            }catch(Exception ignored){\r\n////                out.append(\"错误原因为：\").append(ignored.getMessage())\r\n////            }\r\n//        }\r\n//\r\n//        try {\r\n//            for (String s : sqls) {\r\n//                out.append(\"S的长度：\"+s.length()+\"\\n\")\r\n//                new Thread(){\r\n//                    @Override\r\n//                    void run() {\r\n//                        super.run();\r\n//                        groovyService.genericUpdateSql(s);\r\n//                    }\r\n//                }.start();\r\n//            }\r\n//        } catch (Exception ignored) {\r\n//            out.append(\"错误原因为：\").append(ignored.getMessage())\r\n//        }\r\n//\r\n//        out.append(System.currentTimeMillis()-startTime)\r\n\r\n\r\n\r\n        for (Map<String, Object> item : list) {\r\n            try{\r\n                String sql1= groovyService.resolveByMapForSQL(sql,item);\r\n                groovyService.genericUpdateSql(sql1);\r\n            }catch(Exception ignored){\r\n                out.append(\"错误原因为：\").append(ignored.getMessage())\r\n            }\r\n        }\r\n\r\n       // return out;\r\n    }\r\n\r\n    /**\r\n     * 此处是验证债委会，单位是否存在，并且对于银行经办人导入数据进行验证，是否只导入的本单位的数据\r\n     * @param debtCommitteeMap 债委会集合\r\n     * @param organizationMap 单位集合\r\n     * @param out 输出\r\n     * @param list 导入数据\r\n     */\r\n    def hasExistDebtCommitteeAndOrg(Map<String,DebtCommittee> debtCommitteeMap,Map<String,Organization> organizationMap,StringBuilder out,Map<String,Object> item){\r\n\r\n\r\n        LoginUser loginUser = groovyService.getCurrLoginUser();\r\n\r\n        String errStr;\r\n\r\n\r\n        //检查债委会是否存在的\r\n        if (debtCommitteeMap.get(item.get(\"债委会名称\"))==null){\r\n            out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，\")\r\n                    .append(item.get(\"债委会名称\") != null ? (\"名称为：\"+item.get(\"债委会名称\") + \" 的债委会不存在，请检查！\\n\") : \"债委会名称为空，请检查!\\n\");\r\n            //errStr = \"第 \" + item.get(\"行号\") + \" 行，\"+ (item.get(\"债委会名称\") != null ? (\"名称为：\" + item.get(\"债委会名称\") + \" 的债委会不存在，请检查！\\n\") : \"债委会名称为空，请检查!\\n\");\r\n            errStr = (item.get(\"债委会名称\") != null ? (\"名称为：\" + item.get(\"债委会名称\") + \" 的债委会不存在，请检查！\\n\") : \"债委会名称为空，请检查!\\n\");\r\n            ImportLogErrResult im = ImportLogErrResultGenerator.customizeErrReason(item.get(\"行号\"),errStr)\r\n            ((List<ImportLogErrResult>)resultMap.get(\"导入错误\")).add(im);\r\n            resultMap.put(\"导入失败条数\",resultMap.get(\"导入失败条数\") + 1);\r\n            return null;\r\n        }\r\n\r\n        //检查单位是否存在的\r\n        if (organizationMap.get(item.get(\"单位名称\"))==null){\r\n            out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，\")\r\n                    .append( item.get(\"单位名称\") !=null ? (\"名称为：\"+item.get(\"单位名称\") + \" 的单位不存在，请检查！\\n\") : \"单位名称为空，请检查!\\n\");\r\n            //errStr = \"第 \" + item.get(\"行号\") + \" 行，\"+ item.get(\"单位名称\") != null ? (\"名称为：\" + item.get(\"单位名称\") + \" 的单位不存在，请检查！\\n\") : \"单位名称为空，请检查!\\n\";\r\n            errStr = item.get(\"单位名称\") != null ? (\"名称为：\" + item.get(\"单位名称\") + \" 的单位不存在，请检查！\\n\") : \"单位名称为空，请检查!\\n\";\r\n            ImportLogErrResult im = ImportLogErrResultGenerator.customizeErrReason(item.get(\"行号\"),errStr)\r\n            ((List<ImportLogErrResult>)resultMap.get(\"导入错误\")).add(im);\r\n            //resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n            resultMap.put(\"导入失败条数\",resultMap.get(\"导入失败条数\") + 1);\r\n            return null;\r\n        }\r\n\r\n        //检查债委会的主席单位与导入的单位是否匹配的\r\n        if (debtCommitteeMap.get(item.get(\"债委会名称\")).getChairmanAgencyName() != organizationMap.get(item.get(\"单位名称\")).getName()) {\r\n            out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，名称为：\")\r\n                    .append(item.get(\"单位名称\")).append(\" 的单位与名称为：\")\r\n                    .append(item.get(\"债委会名称\")).append(\"的债委会的主席单位不匹配，请检查！\\n\");\r\n            //errStr = \"第 \" + item.get(\"行号\") + \" 行，名称为：\" + item.get(\"单位名称\") +\" 的单位与名称为：\"+ item.get(\"债委会名称\") + \"的债委会的主席单位不匹配，请检查！\\n\";\r\n            errStr = \"名称为：\" + item.get(\"单位名称\") +\" 的单位与名称为：\"+ item.get(\"债委会名称\") + \"的债委会的主席单位不匹配，请检查！\\n\";\r\n            ImportLogErrResult im = ImportLogErrResultGenerator.customizeErrReason(item.get(\"行号\"),errStr)\r\n            ((List<ImportLogErrResult>)resultMap.get(\"导入错误\")).add(im);\r\n            //resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n            resultMap.put(\"导入失败条数\",resultMap.get(\"导入失败条数\") + 1);\r\n            return null;\r\n        }\r\n\r\n        //最后进行角色判断，如果是银行经办人，则只能导入本单位的数据，否则可直接返回该map\r\n        if (currLoginUserIsReporter()){\r\n            if (loginUser.getCurrentOrganization().getName() == item.get(\"单位名称\")){\r\n                return item;\r\n            }else {\r\n                out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，名称为：\")\r\n                        .append(item.get(\"单位名称\")).append(\" 的单位不是当前登录单位，请检查！\\n\");\r\n                //errStr = \"第 \" + item.get(\"行号\") + \" 行，名称为：\" + item.get(\"单位名称\") + \" 的单位不是当前登录单位，请检查！\\n\";\r\n                errStr = \"名称为：\" + item.get(\"单位名称\") + \" 的单位不是当前登录单位，请检查！\\n\";\r\n                ImportLogErrResult im = ImportLogErrResultGenerator.customizeErrReason(item.get(\"行号\"),errStr)\r\n                ((List<ImportLogErrResult>)resultMap.get(\"导入错误\")).add(im);\r\n                //resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n                resultMap.put(\"导入失败条数\",resultMap.get(\"导入失败条数\") + 1);\r\n                return null;\r\n            }\r\n        }else {\r\n            return item;\r\n        }\r\n    }\r\n\r\n    def currLoginUserIsReporter(){\r\n        LoginUser loginUser = groovyService.getCurrLoginUser();\r\n\r\n        if (loginUser.getUserRoleCodes().contains(\"10001\")){\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * 查出所有的组织机构，并转换成map形式\r\n     * @return\r\n     */\r\n    def organizationMap(){\r\n        //查询出所有的单位\r\n        List<Organization> organizationList = groovyService.findAllOrganizations();\r\n\r\n        //将单位链表转换成map，key为单位名称，value为单位实体\r\n        Map<String,Organization> organizationMap = organizationList.stream()\r\n                .collect(Collectors.toMap(new Function<Organization, String>() {\r\n                    @Override\r\n                    String apply(Organization t) {\r\n                        return t.getName();\r\n                    }\r\n                },new Function<Organization, Organization>() {\r\n                    @Override\r\n                    Organization apply(Organization t) {\r\n                        return t;\r\n                    }\r\n                }));\r\n\r\n        return organizationMap;\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有债委会，且返回map，key：债委会名称，value：债委会实体\r\n     * @return\r\n     */\r\n    def debtCommitteeMap(){\r\n        //查出所有债委会\r\n        List<DebtCommittee> debtCommitteeList = groovyService.findAllDebtCommitteeByStatus(\"存续%\");\r\n\r\n        //将债委会链表转换成map，key为债委会名称，value为债委会实体\r\n        Map<String,DebtCommittee> debtCommitteeMap = debtCommitteeList.stream()\r\n                .collect(Collectors.toMap(new Function<DebtCommittee, String>() {\r\n                    @Override\r\n                    String apply(DebtCommittee t) {\r\n                        return t.getDebtCommitteeName();\r\n                    }\r\n                },new Function<DebtCommittee, DebtCommittee>() {\r\n                    @Override\r\n                    DebtCommittee apply(DebtCommittee t) {\r\n                        return t;\r\n                    }\r\n                }));\r\n\r\n        return debtCommitteeMap;\r\n    }\r\n\r\n\r\n    // 查重且输出\r\n    def checkDuplicate(String duplicateField,List<Map<String, Object>> list,ImportParams params,StringBuilder out){\r\n        if (duplicateField==null||duplicateField==\"\"){\r\n            throw new DDDException(\"该查重字段不存在，请检查!\")\r\n        }\r\n\r\n        // 债委会查重，此处主要用于附件1债委会季度报表表1\r\n        List<Map<String, Object>> resultList=new ArrayList<>(list.size());\r\n        Map<Object,Set<Integer>> collision = new HashMap<>();\r\n        Map<Object,Integer> init=new HashMap<>();\r\n        for (int i = 0;i < list.size();i++){\r\n            Object currName=list.get(i).get(duplicateField);\r\n            Integer currIndex=i+params.getHeadRows()+params.getTitleRows()+1;\r\n            Set<Integer> indexSet=collision.get(currName);\r\n            if (indexSet!=null){\r\n                indexSet.add(currIndex);\r\n                Integer index=init.get(currName);\r\n                if(index!=null) {\r\n                    resultList.removeIf({ map -> (map.get(duplicateField) == currName) });\r\n                    init.put(currName,null);\r\n                }\r\n            } else {\r\n                Set<Integer> set=new LinkedHashSet<>(1);\r\n                set.add(currIndex);\r\n                init.put(currName,currIndex);\r\n                collision.put(currName,set);\r\n                resultList.add(list.get(i));\r\n            }\r\n        }\r\n\r\n        Iterator iterator=collision.iterator();\r\n        while (iterator.hasNext()){\r\n            Map.Entry<Object,Set<Integer>> entry=iterator.next();\r\n            Set<Integer> indexSet=entry.value;\r\n            if(indexSet.size()>1){\r\n                out.append(\"第 \")\r\n                String errRowNums = \"\";\r\n                for(Integer i : indexSet){\r\n                    errRowNums += i+\",\";\r\n                    out.append(i+\"、\")\r\n                }\r\n                errRowNums = errRowNums.substring(0,errRowNums.length()-1)\r\n                out.deleteCharAt(out.length()-1);\r\n                out.append(\" 行,名称为：\\\" \"+entry.getKey()+\" \\\" 的\"+duplicateField+\"重复，请处理后再导入，此次不导入\\n\");\r\n                String errReason = \"名称为：\" + entry.getKey() + \" 的\"+duplicateField+\"重复，请处理后再导入，此次不导入\"\r\n                ImportLogErrResult im = ImportLogErrResultGenerator.customizeErrReason(errRowNums,errReason);\r\n                ((List<ImportLogErrResult>)resultMap.get(\"导入错误\")).add(im);\r\n                resultMap.put(\"导入失败条数\",resultMap.get(\"导入失败条数\")+indexSet.size());\r\n            }\r\n        }\r\n\r\n        return resultList;\r\n    }\r\n\r\n\r\n    def dataVerification(Integer titleAndHeadRow,List<Map<String, Object>> list, StringBuilder out, Model model){\r\n        if (list.size()==0||list==null){\r\n            throw new DDDException(\"该表格中无数据，原因可能是您更改了导入表格的表头，导致读取文件数据错误，请勿更改模板表头！\")\r\n        }\r\n        //1.读取到的数据首先需要检查债委会是否存在\r\n        //2.对导入的数据进行状态验证，如果是已审核的数据，则不允许再覆盖\r\n        //3.对于不存在的成员单位，需要直接创建，债委会原来的验证不再需要\r\n        List<Map<String, Object>> resultList = new ArrayList<>();\r\n\r\n\r\n        ErrResult2VueRuleConvertor errResult2VueRuleConvertor = new ErrResult2VueRuleConvertor(model);\r\n        //对数据进行校验处理\r\n        for (int i = 0;i < list.size() ; i++ ) {\r\n            //用于存放导入数据中错误的数据\r\n            List<ImportLogErrResult> importLogErrResultList = new ArrayList<>();\r\n\r\n            //五个map齐聚一堂，然后需要合并掉\r\n            Map<String,Object> textHandlingMap = textHandling((titleAndHeadRow+i+1),list.get(i),model,importLogErrResultList,out);\r\n            if (textHandlingMap != null) {\r\n                Map<String,Object> decimalHandlingMap = decimalHandling((titleAndHeadRow+i+1),list.get(i),model,importLogErrResultList,out);\r\n                Map<String,Object> doubleHandlingMap = integerHandling((titleAndHeadRow+i+1),list.get(i),model,importLogErrResultList,out);\r\n                Map<String,Object> timeHandlingMap = timeHandling((titleAndHeadRow+i+1),list.get(i),model,importLogErrResultList,out);\r\n                Map<String,Object> dropdownHandlingMap = dropdownHandling((titleAndHeadRow+i+1),list.get(i),model,importLogErrResultList,out);\r\n\r\n                //合并map\r\n                Map<String,Object> m = MapUtil.mergeMaps(textHandlingMap,decimalHandlingMap,doubleHandlingMap,timeHandlingMap,dropdownHandlingMap);\r\n\r\n//                outErrToScreen((titleAndHeadRow+i+1),out,importLogErrResultList)\r\n                //outErrToScreen(list.get(i).get(\"行号\") as Integer,out,importLogErrResultList)\r\n\r\n                if (importLogErrResultList.size()==0){\r\n                    resultMap.put(\"导入成功条数\",resultMap.get(\"导入成功条数\") + 1);\r\n                }else {\r\n                    resultMap.put(\"导入成功条数\",resultMap.get(\"导入成功条数\") + 1);\r\n                    resultMap.put(\"导入警告条数\",resultMap.get(\"导入警告条数\") + 1);\r\n                }\r\n\r\n                //使用Java8的流将ImportLogErrResult的链表映射成为ErrResultVueRule的链表\r\n                List<ErrResultVueRule> errResultVueRuleList=importLogErrResultList.stream()\r\n                        .map(errResult2VueRuleConvertor.&importLogErrResult2VueRule)\r\n                        .collect(Collectors.toList());\r\n                //使用Json转换器把链表转换成json字符串\r\n                String s= JsonConvertor.errResultVueRules2Json(errResultVueRuleList);\r\n                m.put(\"导入日志\",s)\r\n                resultList.add(m);\r\n            }\r\n        }\r\n\r\n        return resultList;\r\n    }\r\n\r\n    /**\r\n     * 将错误输出到屏幕\r\n     * @param rowNum 行号\r\n     * @param out 输出\r\n     * @param importLogErrResultList 错误信息链表\r\n     * @return\r\n     */\r\n    def outErrToScreen(Integer rowNum,StringBuilder out,List<ImportLogErrResult> importLogErrResultList){\r\n        if (importLogErrResultList.size()>0) {\r\n            out.append(\"第 \"+rowNum+\" 行，\");\r\n            for (ImportLogErrResult k : importLogErrResultList){\r\n                out.append(k.getErrColumnName()).append(\" : \").append(k.getErrReason()).append(\"、\")\r\n            }\r\n            out.deleteCharAt(out.length()-1);\r\n            out.append(\"\\n\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理文本，比如查询债委会是否存在之类的东西\r\n     * 查询该债委会，如果不存在，就存放到out里面吧\r\n     */\r\n    def textHandling(Integer rowNum,Map<String, Object> item,Model model,List<ImportLogErrResult> importLogErrResultList,StringBuilder out){\r\n        //用一个map来存储过滤后得到的数据\r\n        Map<String,Object> textHandlingDataMap = new HashMap<>();\r\n\r\n        Set<String> keys = item.keySet();\r\n\r\n        for (String i : keys){\r\n            if (!\"行号\".equals(i)) {\r\n                if (model.getModelItemsMap().get(i).getModelDataTypeId() == 1 || model.getModelItemsMap().get(i).getModelDataTypeId() == 2 || model.getModelItemsMap().get(i).getModelDataTypeId() == 10){\r\n                    Object o = i == \"责任机构_联系方式\" ? checkPhoneNumber(item.get(i)) : item.get(i);\r\n                    textHandlingDataMap.put(i,(StringUtils.isBlank(o as String) ? (o as String) : (o as String).trim()));\r\n                }\r\n            }\r\n        }\r\n\r\n        //此处是附件1债委会季度报表表1特制检测条件\r\n        if ((textHandlingDataMap.get(\"实际控制人\") == \"\"|| textHandlingDataMap.get(\"实际控制人\") == null) && item.get(\"企业性质\") == \"民营\"){\r\n            importLogErrResultList.add(ImportLogErrResultGenerator.textNoNullFormatErr(rowNum,\"实际控制人\",item.get(\"债委会名称\"),textHandlingDataMap.get(\"实际控制人\")));\r\n        }\r\n        return textHandlingDataMap;\r\n    }\r\n\r\n    def hasDebtComAndOrg(Integer rowNum,Map<String, Object> textHandlingDataMap,StringBuilder out,Model model){\r\n        //查询该债委会是否存在，若不存在，放到out中，提示用户该债委会不存在\r\n        //查询是否存在sql注入\r\n        boolean hasSqlInjection = containsSqlInjection(textHandlingDataMap.get(\"债委会名称\")) && containsSqlInjection(textHandlingDataMap.get(\"单位名称\"))\r\n\r\n        LoginUser loginUser = groovyService.getCurrLoginUser();\r\n\r\n        //如果hasSqlInjection返回为true，说明存在sql注入等非法字符\r\n        if (!hasSqlInjection) {\r\n            //拼接查询sql\r\n            String findDebtCommitteeSql = \"SELECT count(t0.债委会名称) as 债委会数量 FROM \"+ model.getModelName() +\" t0 WHERE t0.债委会名称 = \'\" + textHandlingDataMap.get(\"债委会名称\")+\"\'\";\r\n            List<ConcurrentHashMap> hasDebtCommittee = groovyService.genericSelectSql(findDebtCommitteeSql);\r\n\r\n            //这里是验证单位是否存在\r\n            List<Organization> hasOrganization = groovyService.findOrganizationsWithIdNameByName(textHandlingDataMap.get(\"单位名称\"));;\r\n\r\n            //这里是验证债委会名称是否存在\r\n            if (hasDebtCommittee.get(0).get(\"债委会数量\")>0){\r\n                //这里是验证单位是否存在\r\n                if (hasOrganization.size() > 0){\r\n                    if (loginUser.getCurrentOrganization().getName() != hasOrganization.get(0).getName()){\r\n                        out.append(\"第\").append(rowNum).append(\"行，名称为：\").append(textHandlingDataMap.get(\"单位名称\")).append(\" 的单位不是\").append(loginUser.getCurrentOrganization().getName()).append(\"，请检查!\\n\");\r\n                    }\r\n                }else{\r\n                    out.append(\"第\").append(rowNum).append(\"行，名称为：\").append(textHandlingDataMap.get(\"单位名称\")).append(\" 的单位不存在，请联系银行业协会管理员添加单位\\n\");\r\n                }\r\n            }else {\r\n                out.append(\"第\").append(rowNum).append(\"行，\");\r\n                textHandlingDataMap.get(\"债委会名称\") == null ? out.append(\"债委会名称为空，请检查！\\n\") :\r\n                        out.append(\"名称为：\")\r\n                                .append(textHandlingDataMap.get(\"债委会名称\"))\r\n                                .append(\" 的债委会不在报表中，请联系银保监局填报管理员重新创建该季度的填报\\n\");\r\n            }\r\n        } else {\r\n            out.append(\"第\").append(rowNum).append(\"行，债委会名称为：\")\r\n                    .append(textHandlingDataMap.get(\"债委会名称\"))\r\n                    .append(\"或单位名称为：\").append(textHandlingDataMap.get(\"单位名称\"))\r\n                    .append(\"存在非法字符，请检查！\\n\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 用于处理联系方式，由于Excel的导入服务将电话号码识别为Double，所以需要转换\r\n     * @param obj\r\n     * @return\r\n     */\r\n    def checkPhoneNumber(Object obj){\r\n        if (obj!=null && obj!=\"\") {\r\n            if (obj.getClass() == String.class) {\r\n                obj = obj as String;\r\n                if (!obj.contains(\"-\")) {\r\n                    obj = obj.trim().replaceAll(\" \",\"-\");\r\n                    obj = obj.contains(\"/\") ? obj.substring(0,obj.indexOf(\"/\")) : (obj.contains(\"\\\\\") ? obj.substring(0,obj.indexOf(\"\\\\\")) : obj);\r\n                    return obj;\r\n                }else {\r\n                    return obj\r\n                }\r\n            }else if(obj.class.getSuperclass() == Number.class){\r\n                String tempStr = obj as String;\r\n                DecimalFormat df = tempStr.length() > 8 ? new DecimalFormat(\"#0000000000\") : new DecimalFormat(\"#0000000\");\r\n                double d = Double.valueOf(obj as Double)\r\n                return df.format(d);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理小数，只读小数的方法\r\n     * @param item 表格的一行数据\r\n     * @param model 模型\r\n     * @param importLogErrResultList 收集错误的链表\r\n     * @param out 输出到屏幕的输出\r\n     * @return 返回处理后的map\r\n     */\r\n    def decimalHandling(Integer rowNum,Map<String, Object> item, Model model, List<ImportLogErrResult> importLogErrResultList, StringBuilder out){\r\n        //用一个map来存储过滤后得到的数据\r\n        Map<String,Object> decimalHandlingDataMap = new HashMap<>();\r\n\r\n        Set<String> keys = item.keySet();\r\n        for (String i : keys){\r\n            if (!\"行号\".equals(i)) {\r\n                if (model.getModelItemsMap().get(i).getModelDataTypeId() == 6 || model.getModelItemsMap().get(i).getModelDataTypeId() == 11){\r\n                    decimalHandlingDataMap.put(i,item.get(i));\r\n                }\r\n            }\r\n        }\r\n\r\n        //处理小数数值\r\n        Set<String> filterKeys = decimalHandlingDataMap.keySet();\r\n        for (String f : filterKeys){\r\n            Object obj = decimalHandlingDataMap.get(f);\r\n\r\n            //根据数据库中模型项判断此字段是否可以为空，若不能为空但导入数据却为空，则需要错误提示\r\n            if (!model.getModelItemsMap().get(f).canNull() && obj == null){\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.textNoNullFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                continue;\r\n            }\r\n\r\n            if (obj!=null) {\r\n                if (obj.class.getSuperclass() == Number.class){\r\n                    Object value = dynamicDecimalDigits(model.getModelItemsMap().get(f).getDigits(),obj);\r\n                    decimalHandlingDataMap.put(f,value);\r\n                }else {\r\n                    String str = (String)obj;\r\n                    boolean isNumber = NumberUtil.isNumber(StringUtils.remove(str,\"\\\\s\"));\r\n                    if (!isNumber){\r\n                        importLogErrResultList.add(ImportLogErrResultGenerator.numberFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,str));\r\n                        //当出现数据有误时，将数据置为null\r\n                        decimalHandlingDataMap.put(f,null);\r\n                    }\r\n                }\r\n            }else{\r\n                if (!model.getModelItemsMap().get(f).canNull()){\r\n                    importLogErrResultList.add(ImportLogErrResultGenerator.numberFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                }\r\n                decimalHandlingDataMap.put(f,null);\r\n            }\r\n        }\r\n\r\n        //此处是特殊的验证，验证全口径融资余额是否等于辖内加辖外\r\n//        if (decimalHandlingDataMap.get(\"债委会成员企业情况_全口径融资余额万元\") && decimalHandlingDataMap.get(\"债委会成员企业情况_全口径融资余额万元\") && decimalHandlingDataMap.get(\"债委会成员企业情况_全口径融资余额万元\"))\r\n\r\n        return decimalHandlingDataMap;\r\n    }\r\n\r\n    /**\r\n     * 动态设置小数位数\r\n     * @param digits 小数位数\r\n     * @param value 需要格式化的值\r\n     * @return 返回处理后的值\r\n     */\r\n    def dynamicDecimalDigits(Integer digits,Object value){\r\n        StringBuilder str = digits == 0 ? new StringBuilder(\"0\") : new StringBuilder(\"0.\");\r\n        for (int i = 0; i < digits;i++){\r\n            str.append(\"0\")\r\n        }\r\n        DecimalFormat df = new DecimalFormat(str.toString());\r\n        return Double.valueOf(df.format(value));\r\n    }\r\n\r\n\r\n    /**\r\n     * 处理整数，只读整数的方法\r\n     * @param item 表格的一行数据\r\n     * @param model 模型\r\n     * @param importLogErrResultList 收集错误的链表\r\n     * @param out 输出到屏幕的输出\r\n     * @return 返回处理后的map\r\n     */\r\n    def integerHandling(Integer rowNum, Map<String, Object> item, Model model, List<ImportLogErrResult> importLogErrResultList, StringBuilder out){\r\n\r\n        Map<String,Object> doubleHandlingDataMap = new HashMap<>();\r\n\r\n        //将对应条件的值装入map\r\n        Set<String> keys = item.keySet();\r\n        for (String i : keys){\r\n            if (!\"行号\".equals(i)) {\r\n                if (model.getModelItemsMap().get(i).getModelDataTypeId() == 17 || model.getModelItemsMap().get(i).getModelDataTypeId() == 18){\r\n                    doubleHandlingDataMap.put(i,item.get(i));\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        //这里是特殊的验证，已写死\r\n        if (doubleHandlingDataMap.get(\"债委会成员企业情况_成员企业个人数量\")!=null) {\r\n            //处理表间验证\r\n            String sql = \"SELECT count(关联企业名称) as 数量 FROM `附件1_2债委会关联企业明细表子表` WHERE 债委会名称 = \'\"+item.get(\"债委会名称\")+\"\' AND 单位名称 = \'\"+item.get(\"单位名称\")+\"\' AND `是否纳入债委会` = \'是\'  \" +\r\n                    \" AND 填报项目编号 = \" +\r\n                    \" (SELECT t1.eid FROM dcm_bill_project t0,dcm_bill_project t1 WHERE t0.eid = \"+ item.get(\"填报项目编号\") +\" and t0.period = t1.period AND t0.year = t1.year and t1.model_name = \'附件1_2债委会关联企业明细表\')\"\r\n\r\n            List<ConcurrentHashMap> selectData = groovyService.genericSelectSql(sql);\r\n            Integer count = selectData.get(0).get(\"数量\") as Integer;\r\n\r\n            if (doubleHandlingDataMap.get(\"债委会成员企业情况_成员企业个人数量\")!=count){\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.specialErrForAnnex1(item.get(\"行号\"),\"债委会成员企业情况_成员企业个人数量\", item.get(\"债委会名称\") as String,doubleHandlingDataMap.get(\"债委会成员企业情况_成员企业个人数量\")));\r\n            }\r\n        }\r\n\r\n\r\n        Set<String> filterKeys = doubleHandlingDataMap.keySet();\r\n        for (String f : filterKeys){\r\n            Object obj = doubleHandlingDataMap.get(f);\r\n\r\n            //根据数据库中模型项判断此字段是否可以为空，若不能为空但导入数据却为空，则需要错误提示\r\n            if (!model.getModelItemsMap().get(f).canNull() && obj == null){\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.textNoNullFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                continue;\r\n            }\r\n\r\n            if (obj!=null) {\r\n                if (obj.class.getSuperclass() == Number.class){\r\n                    Object value = dynamicDecimalDigits(model.getModelItemsMap().get(f).getDigits(),obj);\r\n                    doubleHandlingDataMap.put(f,value);\r\n                }else {\r\n                    String str = (String)obj;\r\n                    boolean isNumber = NumberUtil.isNumber(StringUtils.remove(str,\"\\\\s\"));\r\n                    if (!isNumber){\r\n                        importLogErrResultList.add(ImportLogErrResultGenerator.numberFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,str));\r\n                        //当出现数据有误时，将数据置为null\r\n                        doubleHandlingDataMap.put(f,null);\r\n                    }\r\n                }\r\n            }else{\r\n                if (!model.getModelItemsMap().get(f).canNull()){\r\n                    importLogErrResultList.add(ImportLogErrResultGenerator.numberFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                }\r\n                doubleHandlingDataMap.put(f,null);\r\n            }\r\n        }\r\n\r\n        return doubleHandlingDataMap;\r\n    }\r\n\r\n    /**\r\n     * 处理时间日期选择器，日期选择器，时间选择器的方法\r\n     * @param item 表格的一行数据\r\n     * @param model 模型\r\n     * @param importLogErrResultList 收集错误的链表\r\n     * @param out 输出到屏幕的输出\r\n     * @return 返回处理后的map\r\n     */\r\n    def timeHandling(Integer rowNum,Map<String, Object> item,Model model,List<ImportLogErrResult> importLogErrResultList,StringBuilder out){\r\n        //用一个map来存储过滤后得到的数据\r\n        Map<String,Object> timeHandlingDataMap = new HashMap<>();\r\n\r\n        Set<String> keys = item.keySet();\r\n        for (String i : keys){\r\n            if (!\"行号\".equals(i)) {\r\n                if (model.getModelItemsMap().get(i).getModelDataTypeId() == 7 || model.getModelItemsMap().get(i).getModelDataTypeId() == 8 || model.getModelItemsMap().get(i).getModelDataTypeId() == 9){\r\n                    timeHandlingDataMap.put(i,item.get(i));\r\n                }\r\n            }\r\n        }\r\n\r\n        Set<String> filterKeys = timeHandlingDataMap.keySet();\r\n        for (String f : filterKeys){\r\n            Object obj = timeHandlingDataMap.get(f);\r\n\r\n            //根据数据库中模型项判断此字段是否可以为空，若不能为空但导入数据却为空，则需要错误提示\r\n            if (!model.getModelItemsMap().get(f).canNull() && obj == null){\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.textNoNullFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                continue;\r\n            }\r\n\r\n            if (obj.getClass() == String.class){\r\n                Date d = DateUtil.parseDate((obj as String).trim());\r\n\r\n                if (d!=null){\r\n\r\n\r\n\r\n                    if(d > Mysql5_7Info.MAX_DATE){\r\n                        //填充错误信息,并且将原来的值置为null\r\n                        importLogErrResultList.add(ImportLogErrResultGenerator.dateSizeErr(item.get(\"行号\"),f,item.get(\"债委会名称\"),obj))\r\n                        timeHandlingDataMap.put(f,null);\r\n                    }else {\r\n                        timeHandlingDataMap.put(f,d);\r\n                    }\r\n\r\n\r\n\r\n                }else {\r\n\r\n\r\n                    //填充错误信息,并且将原来的值置为null\r\n                    importLogErrResultList.add(ImportLogErrResultGenerator.dateFormatErr(item.get(\"行号\"),f,item.get(\"债委会名称\"),obj))\r\n                    timeHandlingDataMap.put(f,null);\r\n\r\n\r\n\r\n                }\r\n\r\n            }else if (obj.getClass() == Date.class){\r\n\r\n\r\n                if(obj > Mysql5_7Info.MAX_DATE){\r\n                    //填充错误信息,并且将原来的值置为null\r\n                    importLogErrResultList.add(ImportLogErrResultGenerator.dateSizeErr(item.get(\"行号\"),f,item.get(\"债委会名称\"),obj))\r\n                    timeHandlingDataMap.put(f,null);\r\n                }\r\n\r\n\r\n            }else{\r\n                //填充错误信息,并且将原来的值置为null\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.dateFormatErr(item.get(\"行号\"),f,item.get(\"债委会名称\"),obj))\r\n                timeHandlingDataMap.put(f,null);\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        return timeHandlingDataMap;\r\n    }\r\n\r\n    /**\r\n     * 处理下拉框的方法\r\n     * @param item 表格的一行数据\r\n     * @param model 模型\r\n     * @param importLogErrResultList 收集错误的链表\r\n     * @param out 输出到屏幕的输出\r\n     * @return 返回处理后的map\r\n     */\r\n    def dropdownHandling(Integer rowNum,Map<String, Object> item,Model model,List<ImportLogErrResult> importLogErrResultList,StringBuilder out){\r\n\r\n        //用一个map来存储过滤后得到的数据\r\n        Map<String,Object> dropdownHandlingDataMap = new HashMap<>();\r\n\r\n        Set<String> keys = item.keySet();\r\n        for (String i : keys){\r\n            if (!\"行号\".equals(i)) {\r\n                if (model.getModelItemsMap().get(i).getModelDataTypeId() == 5){\r\n                    dropdownHandlingDataMap.put(i,item.get(i));\r\n                }\r\n            }\r\n        }\r\n\r\n        //将可选项不为空的模型项分离出来\r\n        List<ModelItem> verifyModelItem = model.getModelItemsMap().entrySet().stream()\r\n                .map({ e -> e.getValue()})\r\n                .filter({ e -> e.getOptions() != null && e.getOptions() != \"\" })\r\n                .collect(Collectors.toList());\r\n\r\n        //将获取到的链表转换成map\r\n        Map<String,List<String>> verifyModelItemMap = new ConcurrentHashMap<>();\r\n        for (ModelItem i : verifyModelItem){\r\n            verifyModelItemMap.put(i.getSpliceModelItemName(), Arrays.asList(i.getOptions().split(\"[\\\\f\\\\n\\\\r]\")));\r\n        }\r\n\r\n        Set<String> filterKeys = dropdownHandlingDataMap.keySet();\r\n        for (String f : filterKeys){\r\n            Object obj = dropdownHandlingDataMap.get(f);\r\n\r\n            //根据数据库中模型项判断此字段是否可以为空，若不能为空但导入数据却为空，则需要错误提示\r\n            if (!model.getModelItemsMap().get(f).canNull() && obj == null){\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.textNoNullFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                continue;\r\n            }\r\n\r\n            if (obj!=null) {\r\n                if (verifyModelItemMap.get(f)!=null) {\r\n                    if (!verifyModelItemMap.get(f).contains(dropdownHandlingDataMap.get(f))){\r\n                        //此处错误信息需要根据不同表格进行制定\r\n                        importLogErrResultList.add(ImportLogErrResultGenerator.dropdownFormatErr(item.get(\"行号\"),f,item.get(\"债委会名称\"),obj))\r\n                    }\r\n                } else {\r\n                    //这个地方需要考虑是否要添加错误信息\r\n                    out.append(\"请联系银保监局填报管理员设置:\").append(f).append(\"的选项值，此处数据仍会导入。\\n\")\r\n                }\r\n            }else{\r\n                if (!model.getModelItemsMap().get(f).canNull()){\r\n                    importLogErrResultList.add(ImportLogErrResultGenerator.numberFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                }\r\n                dropdownHandlingDataMap.put(f,null);\r\n            }\r\n        }\r\n\r\n\r\n        return dropdownHandlingDataMap;\r\n    }\r\n\r\n    /**\r\n     * 是否含有sql注入，返回true表示含有\r\n     * @param obj\r\n     * @return\r\n     */\r\n    def containsSqlInjection(Object obj){\r\n        Pattern pattern= Pattern.compile(\"\\\\b(and|exec|insert|select|drop|grant|alter|delete|update|count|chr|mid|master|truncate|char|declare|or)\\\\b|(\\\\*|;|\\\\+|\'|%)\");\r\n        Matcher matcher=pattern.matcher(obj.toString());\r\n        return matcher.find();\r\n    }\r\n}\r\n');
INSERT INTO `test` VALUES ('2', 'import cn.afterturn.easypoi.excel.ExcelImportUtil\r\nimport cn.afterturn.easypoi.excel.entity.ImportParams\r\nimport cn.hutool.core.util.NumberUtil\r\nimport com.ddd.info.dcm.dto.modelManage.ErrResultVueRule\r\nimport com.ddd.info.dcm.entity.debtCommitteeManage.DebtCommittee\r\nimport com.ddd.info.dcm.entity.debtCommitteeManage.DebtCommitteeMember\r\nimport com.ddd.info.dcm.entity.modelManage.Model\r\nimport com.ddd.info.dcm.entity.modelManage.ModelItem\r\nimport com.ddd.info.dcm.service.billManage.impl.MapImportHandler\r\nimport com.ddd.info.dcm.utils.ImportLogErrResult\r\nimport com.ddd.info.dcm.utils.ImportLogErrResultGenerator\r\nimport com.ddd.info.dcm.utils.MapUtil\r\nimport com.ddd.info.dcm.utils.convert.ErrResult2VueRuleConvertor\r\nimport com.ddd.info.dcm.utils.convert.JsonConvertor\r\nimport com.ddd.info.dcm.utils.metadata.Mysql5_7Info\r\nimport com.ddd.info.simple.DDDException\r\nimport com.ddd.info.simple.entity.organization.Organization\r\nimport com.ddd.info.simple.entity.permission.LoginUser\r\nimport com.ddd.info.simple.util.DateUtil\r\nimport org.apache.commons.lang.StringUtils\r\n\r\nimport java.text.DecimalFormat\r\nimport java.util.concurrent.ConcurrentHashMap\r\nimport java.util.function.Function\r\nimport java.util.regex.Matcher\r\nimport java.util.regex.Pattern\r\nimport java.util.stream.Collectors\r\n\r\n\r\nclass DCM {\r\n    def groovyService\r\n\r\n    /**\r\n     * 现目前resultMap中存的键主要有：\r\n     * 填报项目编号\r\n     * 导入成功条数\r\n     * 导入失败条数\r\n     * 导入警告条数\r\n     * 导入错误\r\n     */\r\n    Map<String,Object> resultMap = new HashMap<>();\r\n\r\n    def insertBefore(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n    def insertAfter(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    def updateBefore(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n    def updateAfter(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n    def deleteBefore(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n    def deleteAfter(Long modelId,Map bill)\r\n    {\r\n        return true;\r\n    }\r\n    def submitBefore(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n    def submitAfter(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    def unsubmitBefore(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n    def unsubmitAfter(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    def checkBefore(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n    def checkAfter(Long modelId,Long billId)\r\n    {\r\n        Map bill = this.groovyService.findBill(modelId,billId);\r\n        String sql=\"update dcm_debt_committee t set t.financing_balance=\"+ bill.get(\"债委会成员企业情况_全口径融资余额\")+\"  where t.eid =\"+bill.get(\"债委会编号\");\r\n        println(sql);\r\n        groovyService.genericUpdateSql(sql);\r\n        return true;\r\n    }\r\n    def uncheckBefore(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n    def uncheckAfter(Long modelId,Long billId)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    def importProjectBills(String importType,Long billProjectId, InputStream data){\r\n        StringBuilder out = new StringBuilder();\r\n        try{\r\n            //开始时间\r\n            Long startTime = System.currentTimeMillis();\r\n\r\n            //初始化返回的map，将主要信息填充到其中\r\n            resultMap.put(\"填报项目编号\",billProjectId)\r\n            resultMap.put(\"导入总计数量\",0)\r\n            resultMap.put(\"导入失败条数\",0)\r\n            resultMap.put(\"导入成功条数\",0)\r\n            resultMap.put(\"导入警告条数\",0)\r\n            resultMap.put(\"导入错误\",new ArrayList<ImportLogErrResult>())\r\n\r\n\r\n            //对导入类型进行判断，是主表还是子表\r\n            importType == \"parent\" ? importParentProjectBills(billProjectId,data,out) : importChildProjectBills(billProjectId,data,out);\r\n\r\n            resultMap.put(\"导入总计耗时\",(System.currentTimeMillis()-startTime)/1000)\r\n            //out.append(\"导入总计耗时：\").append((System.currentTimeMillis()-startTime)/1000).append(\" 秒\")\r\n        }catch(Exception e){\r\n            //out.append(ex2String(e));\r\n            throw new DDDException(\"错误原因是：\"+ex2String(e))\r\n//            resultMap.put(\"异常错误\",\"导入存在异常，请联系管理员！\");\r\n        }\r\n        return resultMap;\r\n    }\r\n\r\n    def ex2String(Throwable t) {\r\n        StringWriter sw = new StringWriter();\r\n        t.printStackTrace(new PrintWriter(sw, true));\r\n        return sw.getBuffer().toString();\r\n    }\r\n\r\n    /**\r\n     * 导入子表的填报\r\n     * @param billProjectId 填报项目ID\r\n     * @param data 数据流\r\n     * @param out 输出到屏幕\r\n     * @return 返回out\r\n     */\r\n    def importChildProjectBills(Long billProjectId, InputStream data,StringBuilder out){\r\n\r\n\r\n\r\n        ImportParams params = new ImportParams();\r\n        params.setTitleRows(3);\r\n        params.setHeadRows(1);\r\n        params.setDataHandler(new MapImportHandler());\r\n        long start = new Date().getTime();\r\n\r\n        List<Map<String, Object>> list = null;\r\n        try {\r\n            list = ExcelImportUtil.importExcel(data, Map.class, params);\r\n        } catch (Exception e) {\r\n            throw new DDDException(\"读取excel文件出错，原因：\" + e.getMessage());\r\n        }\r\n\r\n        if (list.size()==0||list==null){\r\n            //resultMap.put(\"导入错误\",\"该表格中无数据，请添加数据后再导入\\n\")\r\n            throw new DDDException(\"该表格中无数据，请添加数据后再导入\")\r\n            //out.append(\"该表格中无数据，请添加数据后再导入\\n\")\r\n        }\r\n\r\n        resultMap.put(\"导入总计数量\",list.size());\r\n\r\n        Map fieldMap = new HashMap();\r\n        fieldMap.put(\"债委会名称\",\"债委会名称\");\r\n        fieldMap.put(\"单位名称\",\"单位名称\");\r\n        fieldMap.put(\"债委会成员企业情况_全口径融资余额万元\",\"债委会成员企业情况_全口径融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_其中辖内融资余额万元\",\"债委会成员企业情况_其中辖内融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_其中辖外融资余额万元\",\"债委会成员企业情况_其中辖外融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_逾期余额万元\",\"债委会成员企业情况_逾期余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_不良余额万元\",\"债委会成员企业情况_不良余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_全口径融资余额成立时万元\",\"债委会成员企业情况_全口径融资余额成立时万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_增贷金额万元\",\"债委会工作情况本年度累计_成效_增贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_续贷金额万元\",\"债委会工作情况本年度累计_成效_续贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_减贷金额万元\",\"债委会工作情况本年度累计_成效_减贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_费用减免金额万元\",\"债委会工作情况本年度累计_成效_费用减免金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_债务重组_落地债务重组金额万元\",\"债委会工作情况本年度累计_债务重组_落地债务重组金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_债务重组_落地债转股金额万元\",\"债委会工作情况本年度累计_债务重组_落地债转股金额万元\");\r\n        fieldMap.put(\"状态\",\"状态\");\r\n        fieldMap.put(\"填报项目编号\",\"填报项目编号\");\r\n        fieldMap.put(\"导入日志\",\"导入日志\");\r\n\r\n        String findModelNameSql = \"select model_id from dcm_bill_project where eid = \" + billProjectId;\r\n        Long modelId = (groovyService.genericSelectSql(findModelNameSql)).get(0).get(\"model_id\");\r\n\r\n        Model model = groovyService.getModel(modelId);\r\n        Model childModel = groovyService.getModel(model.getChildren().get(0).getId())\r\n\r\n        String sql  = \"update \" + childModel.getModelName() + \" set \" +\r\n                \"债委会成员企业情况_全口径融资余额万元 = \\${债委会成员企业情况_全口径融资余额万元},\" +\r\n                \"债委会成员企业情况_其中辖内融资余额万元 = \\${债委会成员企业情况_其中辖内融资余额万元},债委会成员企业情况_其中辖外融资余额万元 = \\${债委会成员企业情况_其中辖外融资余额万元},\" +\r\n                \"债委会成员企业情况_逾期余额万元 = \\${债委会成员企业情况_逾期余额万元},债委会成员企业情况_不良余额万元 = \\${债委会成员企业情况_不良余额万元},\" +\r\n                \"债委会成员企业情况_全口径融资余额成立时万元 = \\${债委会成员企业情况_全口径融资余额成立时万元},\" +\r\n                \"债委会工作情况本年度累计_成效_增贷金额万元 = \\${债委会工作情况本年度累计_成效_增贷金额万元},债委会工作情况本年度累计_成效_续贷金额万元 = \\${债委会工作情况本年度累计_成效_续贷金额万元},\" +\r\n                \"债委会工作情况本年度累计_成效_减贷金额万元 = \\${债委会工作情况本年度累计_成效_减贷金额万元},债委会工作情况本年度累计_成效_费用减免金额万元 = \\${债委会工作情况本年度累计_成效_费用减免金额万元},\" +\r\n                \"债委会工作情况本年度累计_债务重组_落地债务重组金额万元 = \\${债委会工作情况本年度累计_债务重组_落地债务重组金额万元},债委会工作情况本年度累计_债务重组_落地债转股金额万元 = \\${债委会工作情况本年度累计_债务重组_落地债转股金额万元},\" +\r\n                \"状态 = \\${状态},导入日志 = \\${导入日志} where 父填报编号 = \\${父填报编号} and 单位名称 = \\${单位名称} and 状态 not in (\'已审核\')\";\r\n\r\n        List<Map<String, Object>> newList  = new ArrayList();\r\n        for (Map<String, Object> item : list) {\r\n            Map  newItem = new HashMap<>();\r\n            for(String key : fieldMap.keySet()){\r\n                if (\"状态\".equals(key)){\r\n                    item.put(\"状态\",\"未开始填报\")\r\n                } else if (\"填报项目编号\".equals(key)){\r\n                    item.put(\"填报项目编号\",billProjectId)\r\n                }\r\n\r\n                Object value = item.get(key);\r\n\r\n                newItem.put(fieldMap.get(key),value);\r\n\r\n            }\r\n            newList.add(newItem);\r\n        }\r\n\r\n        //查询出所有的债委会\r\n        Map<String,DebtCommittee> debtCommitteeMap = debtCommitteeMap();\r\n\r\n        //查出所有的单位\r\n        Map<String,Organization> organizationMap = organizationMap();\r\n\r\n\r\n        newList = checkMulDuplicate(newList,params,out,\"债委会名称\",\"单位名称\");\r\n\r\n        if (newList.size() == 0){\r\n            throw new DDDException(\"本次导入无正确数据，请修改正确后重新导入\");\r\n            //out.append(\"本次导入无正确数据，请修改正确后重新导入\\n\")\r\n//            return out\r\n        }\r\n\r\n        //在此处查是否存在，后续所有的编号都使用行号来输出\r\n        List<Map<String,Object>> newRightList = new ArrayList<>();\r\n        for (int j = 0;j<newList.size();j++) {\r\n            Map<String,Object> newItem = hasExistDebtCommitteeForChild(debtCommitteeMap,organizationMap,out,newList.get(j));\r\n            if (newItem!=null){\r\n                newRightList.add(newItem);\r\n            }\r\n        }\r\n\r\n        //1.读取到的数据首先需要检查债委会是否存在\r\n        //2.对导入的数据进行状态验证，如果是已审核的数据，则不允许再覆盖\r\n        //3.对于不存在的成员单位，需要直接创建，债委会原来的验证不再需要\r\n        list = dataVerification((params.getTitleRows()+params.getHeadRows()),newRightList,out,childModel);\r\n\r\n        //数据校验后，需要检查该成员单位在该债委会中是否存在，如果不存在，则创建成员单位，并创建填报记录\r\n\r\n        //使用Java8的流对债委会名称进行分组\r\n        Map<Object,List<Map<String,Object>>> groupByDebtCommitteeNameMap = list.stream().collect(Collectors.groupingBy(new Function<Map<String,Object>, Object>() {\r\n            @Override\r\n            Object apply(Map<String,Object> t) {\r\n                return t.get(\"债委会名称\");\r\n            }\r\n        }))\r\n\r\n        //1.首先从数据库进行查询，导入的单位是否存在，若不存在，则提示，若存在，则创建成员单位\r\n\r\n        List<ConcurrentHashMap> allBanks = groovyService.findAllBinkWithEmployee();\r\n        //这里的name是指的Organization这一张表中的名称的字段\r\n        Set<String> localBankNames = allBanks.stream()\r\n                .map({e -> e.get(\"name\")})\r\n                .collect(Collectors.toSet());\r\n\r\n        //分组后的一个set集合\r\n        Set<Object> modifiedKeySet = groupByDebtCommitteeNameMap.keySet();\r\n        //2.创建成员单位进行批量创建，需要new成员单位对象，此时需要查询单位的默认经办人\r\n        List<DebtCommitteeMember> debtCommitteeMembers = new ArrayList<>();\r\n        for (Object j : modifiedKeySet){\r\n            Set<String> excelBankNames = groupByDebtCommitteeNameMap.get(j).stream()\r\n                    .map({e -> e.get(\"单位名称\")})\r\n                    .collect(Collectors.toSet());\r\n\r\n            //求差集，过滤掉那些没有的单位\r\n            //差集集合\r\n            Set<String> summaryDifferenceSet = new HashSet<>();\r\n            summaryDifferenceSet.addAll(excelBankNames)\r\n            summaryDifferenceSet.removeAll(localBankNames)\r\n\r\n            //求交集，证明这些都存在于数据库中，可以直接创建成员单位\r\n            //交集集合\r\n            Set<String> summaryIntersectionSet = new HashSet<>();\r\n            summaryIntersectionSet.addAll(excelBankNames)\r\n            summaryIntersectionSet.retainAll(localBankNames)\r\n\r\n            //将存在的金融机构过滤出来，创建成员单位\r\n            List<ConcurrentHashMap> filterBanks = allBanks.stream()\r\n                    .filter({e -> summaryIntersectionSet.contains(e.get(\"name\"))})\r\n                    .collect(Collectors.toList());\r\n\r\n            //根据债委会名称查询id\r\n            DebtCommittee debtCommittee = groovyService.findDebtCommitteesWithIdNameByStatus(j)\r\n\r\n            for (ConcurrentHashMap i : filterBanks){\r\n                //查询该成员单位是否存在于成员单位表中，若存在，则不创建，若不存在，才创建\r\n                DebtCommitteeMember d = groovyService.findDebtCommitteeMemberByDebtCommitteeAndMemberAgency(debtCommittee.getEId(),i.get(\"eid\"),null);\r\n\r\n                if (d == null) {\r\n                    //获取到对应成员单位的那一条数据\r\n                    Map<String,Object> importMemberData = groupByDebtCommitteeNameMap.get(j).stream()\r\n                            .filter({e -> e.get(\"单位名称\") == i.get(\"name\")})\r\n                            .findFirst().orElse(null);\r\n\r\n                    LoginUser loginUser = groovyService.getCurrLoginUser();\r\n\r\n                    if (importMemberData!=null) {\r\n                        DebtCommitteeMember debtCommitteeMember = new DebtCommitteeMember();\r\n                        debtCommitteeMember.setDebtCommitteeId(debtCommittee.getEId());\r\n                        debtCommitteeMember.setDebtCommitteeName(debtCommittee.getDebtCommitteeName());\r\n                        debtCommitteeMember.setOrganizationId(loginUser.getCurrentOrganization().getEId())\r\n                        debtCommitteeMember.setIsChairman(\"否\")\r\n                        debtCommitteeMember.setJoinDate(new Date())\r\n                        debtCommitteeMember.setFinancing(String.valueOf(importMemberData.get(\"债委会成员企业情况_全口径融资余额万元\")))\r\n                        debtCommitteeMember.setMemberAgencyId(i.get(\"eid\") as Long)\r\n                        debtCommitteeMember.setMemberAgencyName(i.get(\"name\") as String)\r\n                        debtCommitteeMember.setResponsibleOrganizationId(i.get(\"eid\") as Long)\r\n                        debtCommitteeMember.setResponsibleOrganizationName(i.get(\"name\") as String)\r\n                        debtCommitteeMember.setContactWay(i.get(\"reporter_link_tel\") as String)\r\n                        debtCommitteeMember.setReporterId(i.get(\"reporter_id\") as Long)\r\n                        debtCommitteeMember.setReporterName(i.get(\"reporter_name\") as String)\r\n                        debtCommitteeMember.setStatus(\"存续\")\r\n\r\n                        debtCommitteeMembers.add(debtCommitteeMember);\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        groovyService.bulkSaveDebtCommitteeMemberAgency(debtCommitteeMembers);\r\n\r\n        Map<String,ConcurrentHashMap> tempMap = new HashMap<>();\r\n\r\n        Set<Object> keySets = groupByDebtCommitteeNameMap.keySet();\r\n        for (Object i : keySets) {\r\n            //3.查询父填报的所有信息，然后存入一个map，传入创建子填报的方法\r\n            String findParentBillSql = \"select t0.编号,t0.债委会编号,t0.债委会名称,\" +\r\n                    \"t0.单位编号,t0.单位名称,t0.责任单位编号,t0.责任单位名称,t0.经办人,t0.经办人编号,\" +\r\n                    \"t0.审核人,t0.审核人编号,t0.填报项目名称,t0.填报项目编号,t0.填报开始时间,t0.填报截止时间 \" +\r\n                    \"from \" + model.getModelName() + \" t0 where t0.填报项目编号 = \" + billProjectId +\r\n                    \" and t0.债委会名称 = \'\" + i + \"\'\";\r\n            List<ConcurrentHashMap> parentBillList = groovyService.genericSelectSql(findParentBillSql);\r\n\r\n            tempMap.put(i as String,parentBillList.get(0));\r\n            //4.创建完成员单位后，再创建填报，调用创建子填报的方法\r\n            groovyService.createCommitteeMember(parentBillList.get(0),childModel,false);\r\n        }\r\n        //5.最后再更新所有的成员单位的数据\r\n        for (Map<String, Object> item : list) {\r\n            try{\r\n                item.put(\"父填报编号\",tempMap.get(item.get(\"债委会名称\")).get(\"编号\"));\r\n                String sql1= groovyService.resolveByMapForSQL(sql,item);\r\n                groovyService.genericUpdateSql(sql1);\r\n            }catch(Exception ignored){\r\n                out.append(\"错误原因为：\").append(ignored.getMessage())\r\n            }\r\n        }\r\n\r\n\r\n        //return out;\r\n    }\r\n\r\n\r\n    def hasExistDebtCommitteeForChild(Map<String,DebtCommittee> debtCommitteeMap,Map<String,Organization> organizationMap,StringBuilder out,Map<String,Object> item){\r\n\r\n        LoginUser loginUser = groovyService.getCurrLoginUser();\r\n\r\n        String errStr;\r\n\r\n        //检查债委会是否存在的\r\n        if (debtCommitteeMap.get(item.get(\"债委会名称\"))==null){\r\n            out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，名称为：\")\r\n                    .append(item.get(\"债委会名称\")).append(\" 的债委会不存在，请检查！\\n\");\r\n            errStr =  \"第\" + item.get(\"行号\") +\" 行，名称为：\" + item.get(\"债委会名称\") + \" 的债委会不存在，请检查！\\n\";\r\n            resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n            return null;\r\n        }\r\n\r\n        //检查单位是否存在的\r\n        if (organizationMap.get(item.get(\"单位名称\"))==null){\r\n            out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，名称为：\")\r\n                    .append(item.get(\"单位名称\")).append(\" 的单位不存在，请检查！\\n\");\r\n            errStr = \"第 \" + item.get(\"行号\") + \" 行，名称为：\" + item.get(\"单位名称\") + \" 的单位不存在，请检查！\\n\";\r\n            resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n            return null;\r\n        }\r\n\r\n        if (currLoginUserIsReporter()) {\r\n            //检查当前导入的债委会的主席单位是否是本单位\r\n            if (debtCommitteeMap.get(item.get(\"债委会名称\")).getChairmanAgencyName() != loginUser.getCurrentOrganization().getName()){\r\n                out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，名称为：\")\r\n                        .append(item.get(\"债委会名称\")).append(\" 的主席单位不是当前登录单位，请检查！\\n\");\r\n\r\n                errStr = \"第 \" + item.get(\"行号\") + \" 行，名称为：\" + item.get(\"债委会名称\") + \" 的主席单位不是当前登录单位，请检查！\\n\";\r\n                resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n                return null;\r\n            }else {\r\n                return item;\r\n            }\r\n        }else {\r\n            return item;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    def checkMulDuplicate(List<Map<String, Object>> list,ImportParams params,StringBuilder out,String...duplicates){\r\n        if (duplicates==null||duplicates.size()==0){\r\n            throw new DDDException(\"该查重字段不存在，请检查!\")\r\n        }\r\n\r\n        // 债委会和单位查重，此处主要用于附件1债委会季度报表表1\r\n        List<Map<String, Object>> resultList=new ArrayList<>(list.size());\r\n        Map<Object,Set<Integer>> collision = new HashMap<>();\r\n        Map<Object,Integer> init=new HashMap<>();\r\n        for (int i = 0;i < list.size();i++){\r\n            Object currName=getMulDuplicateValue(list.get(i),duplicates);\r\n            Integer currIndex=i+params.getHeadRows()+params.getTitleRows()+1;\r\n            Set<Integer> indexSet=collision.get(currName);\r\n            if (indexSet!=null){\r\n                indexSet.add(currIndex);\r\n                Integer index=init.get(currName);\r\n                if(index!=null) {\r\n                    resultList.removeIf({ map -> (getMulDuplicateValue(map,duplicates) == currName) });\r\n                    init.put(currName,null);\r\n                }\r\n            } else {\r\n                Set<Integer> set=new LinkedHashSet<>(1);\r\n                set.add(currIndex);\r\n                init.put(currName,currIndex);\r\n                collision.put(currName,set);\r\n                resultList.add(list.get(i));\r\n            }\r\n        }\r\n\r\n        Iterator iterator=collision.iterator();\r\n        while (iterator.hasNext()){\r\n            Map.Entry<Object,Set<Integer>> entry=iterator.next();\r\n            Set<Integer> indexSet=entry.value;\r\n            if(indexSet.size()>1){\r\n                out.append(\"第 \")\r\n                for(Integer i : indexSet){\r\n                    out.append(i+\"、\")\r\n                }\r\n                out.deleteCharAt(out.length()-1);\r\n                out.append(\" 行,名称为：\\\" \"+(entry.getKey() as String).replaceAll(\"_\",\"、\")+\" \\\" 的\")\r\n                for (String m : duplicates){\r\n                    out.append(m).append(\"、\");\r\n                }\r\n                out.deleteCharAt(out.length()-1);\r\n                out.append(\"重复，请处理后再导入，此次不导入\\n\");\r\n            }\r\n        }\r\n\r\n        return resultList;\r\n\r\n    }\r\n\r\n    //返回值，比如是查重 债委会名称：“xx债委会” 和单位名称：“xx单位”，此时就返回 “xx债委会_xx单位”\r\n    def getMulDuplicateValue(Map<String, Object> map,String...duplicates){\r\n\r\n        StringBuffer combinationName = new StringBuffer();\r\n\r\n        for (String m : duplicates){\r\n            combinationName.append(map.get(m)).append(\"_\");\r\n        }\r\n        combinationName.deleteCharAt(combinationName.length()-1);\r\n\r\n        return combinationName.toString();\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * 导入主表的填报\r\n     * @param billProjectId 填报项目ID\r\n     * @param data 数据流\r\n     * @param out 输出到屏幕\r\n     * @return 返回out\r\n     */\r\n    def importParentProjectBills(Long billProjectId, InputStream data,StringBuilder out) {\r\n        //groovyService.resolveByMapForSQL(String sql ,Map data);\r\n\r\n//        StringBuilder out = new StringBuilder();\r\n//        Long startTime = System.currentTimeMillis();\r\n\r\n        ImportParams params = new ImportParams();\r\n        params.setTitleRows(3);\r\n        params.setHeadRows(1);\r\n        params.setDataHandler(new MapImportHandler());\r\n        long start = new Date().getTime();\r\n\r\n        List<Map<String, Object>> list = null;\r\n        try {\r\n            list = ExcelImportUtil.importExcel(data, Map.class, params);\r\n        } catch (Exception e) {\r\n            throw new DDDException(\"读取excel文件出错，原因：\" + e.getMessage());\r\n        }\r\n\r\n        if (list.size()==0||list==null){\r\n            throw new DDDException(\"该表格中无数据，请添加数据后再导入\")\r\n            //out.append(\"该表格中无数据，请添加数据后再导入\\n\")\r\n        }\r\n\r\n\r\n        resultMap.put(\"导入总计数量\",list.size());\r\n        //out.append(JSONUtil.toJsonPrettyStr(list))\r\n//        for(String key : list.get(0).keySet()){\r\n//            out.append(\"fieldMap.put(\\\"\").append(key).append(\"\\\",\\\"\").append(key).append(\"\\\");\\n\");\r\n//        }\r\n\r\n        Map fieldMap = new HashMap();\r\n        fieldMap.put(\"债委会名称\",\"债委会名称\");\r\n        fieldMap.put(\"单位名称\",\"单位名称\");\r\n        fieldMap.put(\"成员单位数量已加入\",\"成员单位数量已加入\");\r\n        fieldMap.put(\"设立时间\",\"设立时间\");\r\n        fieldMap.put(\"债委会分类\",\"债委会分类\");\r\n        fieldMap.put(\"债委会对策\",\"债委会对策\");\r\n        fieldMap.put(\"企业性质\",\"企业性质\");\r\n        fieldMap.put(\"实际控制人\",\"实际控制人\");\r\n        fieldMap.put(\"实际控制人唯一标识\",\"实际控制人唯一标识\");\r\n        fieldMap.put(\"主要所属行业\",\"主要所属行业\");\r\n        fieldMap.put(\"企业主要所在区域\",\"企业主要所在区域\");\r\n        fieldMap.put(\"是否完成债委会文本签约\",\"是否完成债委会文本签约\");\r\n        fieldMap.put(\"债委会成员企业情况_全口径融资余额万元\",\"债委会成员企业情况_全口径融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_其中辖内融资余额万元\",\"债委会成员企业情况_其中辖内融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_其中辖外融资余额万元\",\"债委会成员企业情况_其中辖外融资余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_逾期余额万元\",\"债委会成员企业情况_逾期余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_不良余额万元\",\"债委会成员企业情况_不良余额万元\");\r\n        fieldMap.put(\"债委会成员企业情况_全口径融资余额成立时万元\",\"债委会成员企业情况_全口径融资余额成立时万元\");\r\n        fieldMap.put(\"债委会成员企业情况_成员企业个人数量\",\"债委会成员企业情况_成员企业个人数量\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_会议情况_召开债委会次数\",\"债委会工作情况本年度累计_会议情况_召开债委会次数\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_会议情况_形成会议决议篇数\",\"债委会工作情况本年度累计_会议情况_形成会议决议篇数\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_增贷金额万元\",\"债委会工作情况本年度累计_成效_增贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_续贷金额万元\",\"债委会工作情况本年度累计_成效_续贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_减贷金额万元\",\"债委会工作情况本年度累计_成效_减贷金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_成效_费用减免金额万元\",\"债委会工作情况本年度累计_成效_费用减免金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_债务重组_落地债务重组金额万元\",\"债委会工作情况本年度累计_债务重组_落地债务重组金额万元\");\r\n        fieldMap.put(\"债委会工作情况本年度累计_债务重组_落地债转股金额万元\",\"债委会工作情况本年度累计_债务重组_落地债转股金额万元\");\r\n        fieldMap.put(\"责任机构_责任机构联系人\",\"责任机构_责任机构联系人\");\r\n        fieldMap.put(\"责任机构_联系方式\",\"责任机构_联系方式\");\r\n        fieldMap.put(\"状态\",\"状态\");\r\n        fieldMap.put(\"填报项目编号\",\"填报项目编号\");\r\n        fieldMap.put(\"导入日志\",\"导入日志\");\r\n        fieldMap.put(\"行号\",\"行号\");\r\n\r\n        String findModelNameSql = \"select model_id from dcm_bill_project where eid = \" + billProjectId;\r\n        Long modelId = (groovyService.genericSelectSql(findModelNameSql)).get(0).get(\"model_id\");\r\n\r\n        Model model = groovyService.getModel(modelId);\r\n\r\n        String sql  = \"update \" + model.getModelName() + \" set \" +\r\n                \"成员单位数量已加入 = \\${成员单位数量已加入},设立时间 = \\${设立时间},债委会分类 = \\${债委会分类},债委会对策 = \\${债委会对策},\" +\r\n                \"企业性质 = \\${企业性质},实际控制人 = \\${实际控制人},实际控制人唯一标识 = \\${实际控制人唯一标识},主要所属行业 = \\${主要所属行业},\" +\r\n                \"主席单位责任机构部室 = \\${主席单位责任机构部室},企业主要所在区域 = \\${企业主要所在区域},\" +\r\n                \"是否完成债委会文本签约 = \\${是否完成债委会文本签约},债委会成员企业情况_全口径融资余额万元 = \\${债委会成员企业情况_全口径融资余额万元},\" +\r\n                \"债委会成员企业情况_其中辖内融资余额万元 = \\${债委会成员企业情况_其中辖内融资余额万元},债委会成员企业情况_其中辖外融资余额万元 = \\${债委会成员企业情况_其中辖外融资余额万元},\" +\r\n                \"债委会成员企业情况_逾期余额万元 = \\${债委会成员企业情况_逾期余额万元},债委会成员企业情况_不良余额万元 = \\${债委会成员企业情况_不良余额万元},\" +\r\n                \"债委会成员企业情况_全口径融资余额成立时万元 = \\${债委会成员企业情况_全口径融资余额成立时万元},债委会成员企业情况_成员企业个人数量 = \\${债委会成员企业情况_成员企业个人数量},\" +\r\n                \"债委会工作情况本年度累计_会议情况_召开债委会次数 = \\${债委会工作情况本年度累计_会议情况_召开债委会次数},债委会工作情况本年度累计_会议情况_形成会议决议篇数 = \\${债委会工作情况本年度累计_会议情况_形成会议决议篇数},\" +\r\n                \"债委会工作情况本年度累计_成效_增贷金额万元 = \\${债委会工作情况本年度累计_成效_增贷金额万元},债委会工作情况本年度累计_成效_续贷金额万元 = \\${债委会工作情况本年度累计_成效_续贷金额万元},\" +\r\n                \"债委会工作情况本年度累计_成效_减贷金额万元 = \\${债委会工作情况本年度累计_成效_减贷金额万元},债委会工作情况本年度累计_成效_费用减免金额万元 = \\${债委会工作情况本年度累计_成效_费用减免金额万元},\" +\r\n                \"债委会工作情况本年度累计_债务重组_落地债务重组金额万元 = \\${债委会工作情况本年度累计_债务重组_落地债务重组金额万元},债委会工作情况本年度累计_债务重组_落地债转股金额万元 = \\${债委会工作情况本年度累计_债务重组_落地债转股金额万元},\" +\r\n                \"责任机构_责任机构联系人 = \\${责任机构_责任机构联系人},责任机构_联系方式 = \\${责任机构_联系方式},\" +\r\n                \"状态 = \\${状态},导入日志 = \\${导入日志} where 填报项目编号 = \\${填报项目编号} and 债委会名称 = \\${债委会名称} and 状态 not in (\'已审核\')\";\r\n\r\n        for(String key : fieldMap.keySet()) {\r\n            if (!(\"行号\".equals(key))&&!model.getModelItemsMap().get(fieldMap.get(key))) {\r\n                out.append(fieldMap.get(key)).append(\" is error\\n\")\r\n            }\r\n        }\r\n\r\n\r\n        List<Map<String, Object>> newList  = new ArrayList();\r\n        for (int i = 0;i<list.size();i++) {\r\n            Map  newItem = new HashMap<>();\r\n            for(String key : fieldMap.keySet()){\r\n                if (\"状态\".equals(key)){\r\n                    list.get(i).put(\"状态\",\"未开始填报\")\r\n                } else if (\"填报项目编号\".equals(key)){\r\n                    list.get(i).put(\"填报项目编号\",billProjectId)\r\n                } else if (\"行号\".equals(key)){\r\n                    list.get(i).put(\"行号\",(params.getHeadRows()+params.getTitleRows()+1+i))\r\n                }\r\n\r\n                Object value = list.get(i).get(key);\r\n\r\n                newItem.put(fieldMap.get(key),value);\r\n\r\n            }\r\n            newList.add(newItem);\r\n        }\r\n\r\n\r\n        //查询出所有的债委会\r\n        Map<String,DebtCommittee> debtCommitteeMap = debtCommitteeMap();\r\n\r\n        //查出所有的单位\r\n        Map<String,Organization> organizationMap = organizationMap();\r\n\r\n        // 附件1债委会季度报表表1特有查重\r\n        newList = checkDuplicate(\"债委会名称\",newList,params,out)\r\n\r\n        //在此处查是否存在，后续所有的编号都使用行号来输出\r\n        List<Map<String,Object>> newRightList = new ArrayList<>();\r\n        for (int j = 0;j<newList.size();j++) {\r\n            Map<String,Object> newItem = hasExistDebtCommitteeAndOrg(debtCommitteeMap,organizationMap,out,newList.get(j));\r\n            if (newItem!=null){\r\n                newRightList.add(newItem);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if (newRightList.size() == 0){\r\n            throw new DDDException(\"本次导入无正确数据，请修改正确后重新导入\")\r\n//            out.append(\"本次导入无正确数据，请修改正确后重新导入\\n\")\r\n//            return out\r\n        }\r\n\r\n        //1.读取到的数据首先需要检查债委会是否存在\r\n        //2.对导入的数据进行状态验证，如果是已审核的数据，则不允许再覆盖\r\n        //3.对于不存在的成员单位，需要直接创建，债委会原来的验证不再需要\r\n        list = dataVerification((params.getTitleRows()+params.getHeadRows()),newRightList,out,model);\r\n\r\n\r\n\r\n\r\n//        StringBuffer stringBuffer = new StringBuffer(50000);//1918\r\n//        Long startTime = System.currentTimeMillis();\r\n//        List<String> sqls=new ArrayList<>();\r\n//        for (Map<String, Object> item : list) {\r\n////            try{\r\n//                String sql1= groovyService.resolveByMapForSQL(sql,item);\r\n//                stringBuffer.append(sql1).append(\';\');\r\n//                if(stringBuffer.length()>=Mysql5_7Info.MAX_MESSAGE_SIZE){\r\n//                    sqls.add(stringBuffer.toString());\r\n//                    stringBuffer=new StringBuffer();\r\n//                }\r\n////            }catch(Exception ignored){\r\n////                out.append(\"错误原因为：\").append(ignored.getMessage())\r\n////            }\r\n//        }\r\n//\r\n//        try {\r\n//            for (String s : sqls) {\r\n//                out.append(\"S的长度：\"+s.length()+\"\\n\")\r\n//                new Thread(){\r\n//                    @Override\r\n//                    void run() {\r\n//                        super.run();\r\n//                        groovyService.genericUpdateSql(s);\r\n//                    }\r\n//                }.start();\r\n//            }\r\n//        } catch (Exception ignored) {\r\n//            out.append(\"错误原因为：\").append(ignored.getMessage())\r\n//        }\r\n//\r\n//        out.append(System.currentTimeMillis()-startTime)\r\n\r\n\r\n\r\n        for (Map<String, Object> item : list) {\r\n            try{\r\n                String sql1= groovyService.resolveByMapForSQL(sql,item);\r\n                groovyService.genericUpdateSql(sql1);\r\n            }catch(Exception ignored){\r\n                out.append(\"错误原因为：\").append(ignored.getMessage())\r\n            }\r\n        }\r\n\r\n       // return out;\r\n    }\r\n\r\n    /**\r\n     * 此处是验证债委会，单位是否存在，并且对于银行经办人导入数据进行验证，是否只导入的本单位的数据\r\n     * @param debtCommitteeMap 债委会集合\r\n     * @param organizationMap 单位集合\r\n     * @param out 输出\r\n     * @param list 导入数据\r\n     */\r\n    def hasExistDebtCommitteeAndOrg(Map<String,DebtCommittee> debtCommitteeMap,Map<String,Organization> organizationMap,StringBuilder out,Map<String,Object> item){\r\n\r\n\r\n        LoginUser loginUser = groovyService.getCurrLoginUser();\r\n\r\n        String errStr;\r\n\r\n\r\n        //检查债委会是否存在的\r\n        if (debtCommitteeMap.get(item.get(\"债委会名称\"))==null){\r\n            out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，\")\r\n                    .append(item.get(\"债委会名称\") != null ? (\"名称为：\"+item.get(\"债委会名称\") + \" 的债委会不存在，请检查！\\n\") : \"债委会名称为空，请检查!\\n\");\r\n            //errStr = \"第 \" + item.get(\"行号\") + \" 行，\"+ (item.get(\"债委会名称\") != null ? (\"名称为：\" + item.get(\"债委会名称\") + \" 的债委会不存在，请检查！\\n\") : \"债委会名称为空，请检查!\\n\");\r\n            errStr = (item.get(\"债委会名称\") != null ? (\"名称为：\" + item.get(\"债委会名称\") + \" 的债委会不存在，请检查！\\n\") : \"债委会名称为空，请检查!\\n\");\r\n            ImportLogErrResult im = ImportLogErrResultGenerator.customizeErrReason(item.get(\"行号\"),errStr)\r\n            ((List<ImportLogErrResult>)resultMap.get(\"导入错误\")).add(im);\r\n            resultMap.put(\"导入失败条数\",resultMap.get(\"导入失败条数\") + 1);\r\n            return null;\r\n        }\r\n\r\n        //检查单位是否存在的\r\n        if (organizationMap.get(item.get(\"单位名称\"))==null){\r\n            out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，\")\r\n                    .append( item.get(\"单位名称\") !=null ? (\"名称为：\"+item.get(\"单位名称\") + \" 的单位不存在，请检查！\\n\") : \"单位名称为空，请检查!\\n\");\r\n            //errStr = \"第 \" + item.get(\"行号\") + \" 行，\"+ item.get(\"单位名称\") != null ? (\"名称为：\" + item.get(\"单位名称\") + \" 的单位不存在，请检查！\\n\") : \"单位名称为空，请检查!\\n\";\r\n            errStr = item.get(\"单位名称\") != null ? (\"名称为：\" + item.get(\"单位名称\") + \" 的单位不存在，请检查！\\n\") : \"单位名称为空，请检查!\\n\";\r\n            ImportLogErrResult im = ImportLogErrResultGenerator.customizeErrReason(item.get(\"行号\"),errStr)\r\n            ((List<ImportLogErrResult>)resultMap.get(\"导入错误\")).add(im);\r\n            //resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n            resultMap.put(\"导入失败条数\",resultMap.get(\"导入失败条数\") + 1);\r\n            return null;\r\n        }\r\n\r\n        //检查债委会的主席单位与导入的单位是否匹配的\r\n        if (debtCommitteeMap.get(item.get(\"债委会名称\")).getChairmanAgencyName() != organizationMap.get(item.get(\"单位名称\")).getName()) {\r\n            out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，名称为：\")\r\n                    .append(item.get(\"单位名称\")).append(\" 的单位与名称为：\")\r\n                    .append(item.get(\"债委会名称\")).append(\"的债委会的主席单位不匹配，请检查！\\n\");\r\n            //errStr = \"第 \" + item.get(\"行号\") + \" 行，名称为：\" + item.get(\"单位名称\") +\" 的单位与名称为：\"+ item.get(\"债委会名称\") + \"的债委会的主席单位不匹配，请检查！\\n\";\r\n            errStr = \"名称为：\" + item.get(\"单位名称\") +\" 的单位与名称为：\"+ item.get(\"债委会名称\") + \"的债委会的主席单位不匹配，请检查！\\n\";\r\n            ImportLogErrResult im = ImportLogErrResultGenerator.customizeErrReason(item.get(\"行号\"),errStr)\r\n            ((List<ImportLogErrResult>)resultMap.get(\"导入错误\")).add(im);\r\n            //resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n            resultMap.put(\"导入失败条数\",resultMap.get(\"导入失败条数\") + 1);\r\n            return null;\r\n        }\r\n\r\n        //最后进行角色判断，如果是银行经办人，则只能导入本单位的数据，否则可直接返回该map\r\n        if (currLoginUserIsReporter()){\r\n            if (loginUser.getCurrentOrganization().getName() == item.get(\"单位名称\")){\r\n                return item;\r\n            }else {\r\n                out.append(\"第 \").append(item.get(\"行号\")).append(\" 行，名称为：\")\r\n                        .append(item.get(\"单位名称\")).append(\" 的单位不是当前登录单位，请检查！\\n\");\r\n                //errStr = \"第 \" + item.get(\"行号\") + \" 行，名称为：\" + item.get(\"单位名称\") + \" 的单位不是当前登录单位，请检查！\\n\";\r\n                errStr = \"名称为：\" + item.get(\"单位名称\") + \" 的单位不是当前登录单位，请检查！\\n\";\r\n                ImportLogErrResult im = ImportLogErrResultGenerator.customizeErrReason(item.get(\"行号\"),errStr)\r\n                ((List<ImportLogErrResult>)resultMap.get(\"导入错误\")).add(im);\r\n                //resultMap.put(\"导入错误\",resultMap.get(\"导入错误\") + errStr);\r\n                resultMap.put(\"导入失败条数\",resultMap.get(\"导入失败条数\") + 1);\r\n                return null;\r\n            }\r\n        }else {\r\n            return item;\r\n        }\r\n    }\r\n\r\n    def currLoginUserIsReporter(){\r\n        LoginUser loginUser = groovyService.getCurrLoginUser();\r\n\r\n        if (loginUser.getUserRoleCodes().contains(\"10001\")){\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * 查出所有的组织机构，并转换成map形式\r\n     * @return\r\n     */\r\n    def organizationMap(){\r\n        //查询出所有的单位\r\n        List<Organization> organizationList = groovyService.findAllOrganizations();\r\n\r\n        //将单位链表转换成map，key为单位名称，value为单位实体\r\n        Map<String,Organization> organizationMap = organizationList.stream()\r\n                .collect(Collectors.toMap(new Function<Organization, String>() {\r\n                    @Override\r\n                    String apply(Organization t) {\r\n                        return t.getName();\r\n                    }\r\n                },new Function<Organization, Organization>() {\r\n                    @Override\r\n                    Organization apply(Organization t) {\r\n                        return t;\r\n                    }\r\n                }));\r\n\r\n        return organizationMap;\r\n    }\r\n\r\n\r\n    /**\r\n     * 查询所有债委会，且返回map，key：债委会名称，value：债委会实体\r\n     * @return\r\n     */\r\n    def debtCommitteeMap(){\r\n        //查出所有债委会\r\n        List<DebtCommittee> debtCommitteeList = groovyService.findAllDebtCommitteeByStatus(\"存续%\");\r\n\r\n        //将债委会链表转换成map，key为债委会名称，value为债委会实体\r\n        Map<String,DebtCommittee> debtCommitteeMap = debtCommitteeList.stream()\r\n                .collect(Collectors.toMap(new Function<DebtCommittee, String>() {\r\n                    @Override\r\n                    String apply(DebtCommittee t) {\r\n                        return t.getDebtCommitteeName();\r\n                    }\r\n                },new Function<DebtCommittee, DebtCommittee>() {\r\n                    @Override\r\n                    DebtCommittee apply(DebtCommittee t) {\r\n                        return t;\r\n                    }\r\n                }));\r\n\r\n        return debtCommitteeMap;\r\n    }\r\n\r\n\r\n    // 查重且输出\r\n    def checkDuplicate(String duplicateField,List<Map<String, Object>> list,ImportParams params,StringBuilder out){\r\n        if (duplicateField==null||duplicateField==\"\"){\r\n            throw new DDDException(\"该查重字段不存在，请检查!\")\r\n        }\r\n\r\n        // 债委会查重，此处主要用于附件1债委会季度报表表1\r\n        List<Map<String, Object>> resultList=new ArrayList<>(list.size());\r\n        Map<Object,Set<Integer>> collision = new HashMap<>();\r\n        Map<Object,Integer> init=new HashMap<>();\r\n        for (int i = 0;i < list.size();i++){\r\n            Object currName=list.get(i).get(duplicateField);\r\n            Integer currIndex=i+params.getHeadRows()+params.getTitleRows()+1;\r\n            Set<Integer> indexSet=collision.get(currName);\r\n            if (indexSet!=null){\r\n                indexSet.add(currIndex);\r\n                Integer index=init.get(currName);\r\n                if(index!=null) {\r\n                    resultList.removeIf({ map -> (map.get(duplicateField) == currName) });\r\n                    init.put(currName,null);\r\n                }\r\n            } else {\r\n                Set<Integer> set=new LinkedHashSet<>(1);\r\n                set.add(currIndex);\r\n                init.put(currName,currIndex);\r\n                collision.put(currName,set);\r\n                resultList.add(list.get(i));\r\n            }\r\n        }\r\n\r\n        Iterator iterator=collision.iterator();\r\n        while (iterator.hasNext()){\r\n            Map.Entry<Object,Set<Integer>> entry=iterator.next();\r\n            Set<Integer> indexSet=entry.value;\r\n            if(indexSet.size()>1){\r\n                out.append(\"第 \")\r\n                String errRowNums = \"\";\r\n                for(Integer i : indexSet){\r\n                    errRowNums += i+\",\";\r\n                    out.append(i+\"、\")\r\n                }\r\n                errRowNums = errRowNums.substring(0,errRowNums.length()-1)\r\n                out.deleteCharAt(out.length()-1);\r\n                out.append(\" 行,名称为：\\\" \"+entry.getKey()+\" \\\" 的\"+duplicateField+\"重复，请处理后再导入，此次不导入\\n\");\r\n                String errReason = \"名称为：\" + entry.getKey() + \" 的\"+duplicateField+\"重复，请处理后再导入，此次不导入\"\r\n                ImportLogErrResult im = ImportLogErrResultGenerator.customizeErrReason(errRowNums,errReason);\r\n                ((List<ImportLogErrResult>)resultMap.get(\"导入错误\")).add(im);\r\n                resultMap.put(\"导入失败条数\",resultMap.get(\"导入失败条数\")+indexSet.size());\r\n            }\r\n        }\r\n\r\n        return resultList;\r\n    }\r\n\r\n\r\n    def dataVerification(Integer titleAndHeadRow,List<Map<String, Object>> list, StringBuilder out, Model model){\r\n        if (list.size()==0||list==null){\r\n            throw new DDDException(\"该表格中无数据，原因可能是您更改了导入表格的表头，导致读取文件数据错误，请勿更改模板表头！\")\r\n        }\r\n        //1.读取到的数据首先需要检查债委会是否存在\r\n        //2.对导入的数据进行状态验证，如果是已审核的数据，则不允许再覆盖\r\n        //3.对于不存在的成员单位，需要直接创建，债委会原来的验证不再需要\r\n        List<Map<String, Object>> resultList = new ArrayList<>();\r\n\r\n\r\n        ErrResult2VueRuleConvertor errResult2VueRuleConvertor = new ErrResult2VueRuleConvertor(model);\r\n        //对数据进行校验处理\r\n        for (int i = 0;i < list.size() ; i++ ) {\r\n            //用于存放导入数据中错误的数据\r\n            List<ImportLogErrResult> importLogErrResultList = new ArrayList<>();\r\n\r\n            //五个map齐聚一堂，然后需要合并掉\r\n            Map<String,Object> textHandlingMap = textHandling((titleAndHeadRow+i+1),list.get(i),model,importLogErrResultList,out);\r\n            if (textHandlingMap != null) {\r\n                Map<String,Object> decimalHandlingMap = decimalHandling((titleAndHeadRow+i+1),list.get(i),model,importLogErrResultList,out);\r\n                Map<String,Object> doubleHandlingMap = integerHandling((titleAndHeadRow+i+1),list.get(i),model,importLogErrResultList,out);\r\n                Map<String,Object> timeHandlingMap = timeHandling((titleAndHeadRow+i+1),list.get(i),model,importLogErrResultList,out);\r\n                Map<String,Object> dropdownHandlingMap = dropdownHandling((titleAndHeadRow+i+1),list.get(i),model,importLogErrResultList,out);\r\n\r\n                //合并map\r\n                Map<String,Object> m = MapUtil.mergeMaps(textHandlingMap,decimalHandlingMap,doubleHandlingMap,timeHandlingMap,dropdownHandlingMap);\r\n\r\n//                outErrToScreen((titleAndHeadRow+i+1),out,importLogErrResultList)\r\n                //outErrToScreen(list.get(i).get(\"行号\") as Integer,out,importLogErrResultList)\r\n\r\n                if (importLogErrResultList.size()==0){\r\n                    resultMap.put(\"导入成功条数\",resultMap.get(\"导入成功条数\") + 1);\r\n                }else {\r\n                    resultMap.put(\"导入成功条数\",resultMap.get(\"导入成功条数\") + 1);\r\n                    resultMap.put(\"导入警告条数\",resultMap.get(\"导入警告条数\") + 1);\r\n                }\r\n\r\n                //使用Java8的流将ImportLogErrResult的链表映射成为ErrResultVueRule的链表\r\n                List<ErrResultVueRule> errResultVueRuleList=importLogErrResultList.stream()\r\n                        .map(errResult2VueRuleConvertor.&importLogErrResult2VueRule)\r\n                        .collect(Collectors.toList());\r\n                //使用Json转换器把链表转换成json字符串\r\n                String s= JsonConvertor.errResultVueRules2Json(errResultVueRuleList);\r\n                m.put(\"导入日志\",s)\r\n                resultList.add(m);\r\n            }\r\n        }\r\n\r\n        return resultList;\r\n    }\r\n\r\n    /**\r\n     * 将错误输出到屏幕\r\n     * @param rowNum 行号\r\n     * @param out 输出\r\n     * @param importLogErrResultList 错误信息链表\r\n     * @return\r\n     */\r\n    def outErrToScreen(Integer rowNum,StringBuilder out,List<ImportLogErrResult> importLogErrResultList){\r\n        if (importLogErrResultList.size()>0) {\r\n            out.append(\"第 \"+rowNum+\" 行，\");\r\n            for (ImportLogErrResult k : importLogErrResultList){\r\n                out.append(k.getErrColumnName()).append(\" : \").append(k.getErrReason()).append(\"、\")\r\n            }\r\n            out.deleteCharAt(out.length()-1);\r\n            out.append(\"\\n\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理文本，比如查询债委会是否存在之类的东西\r\n     * 查询该债委会，如果不存在，就存放到out里面吧\r\n     */\r\n    def textHandling(Integer rowNum,Map<String, Object> item,Model model,List<ImportLogErrResult> importLogErrResultList,StringBuilder out){\r\n        //用一个map来存储过滤后得到的数据\r\n        Map<String,Object> textHandlingDataMap = new HashMap<>();\r\n\r\n        Set<String> keys = item.keySet();\r\n\r\n        for (String i : keys){\r\n            if (!\"行号\".equals(i)) {\r\n                if (model.getModelItemsMap().get(i).getModelDataTypeId() == 1 || model.getModelItemsMap().get(i).getModelDataTypeId() == 2 || model.getModelItemsMap().get(i).getModelDataTypeId() == 10){\r\n                    Object o = i == \"责任机构_联系方式\" ? checkPhoneNumber(item.get(i)) : item.get(i);\r\n                    textHandlingDataMap.put(i,(StringUtils.isBlank(o as String) ? (o as String) : (o as String).trim()));\r\n                }\r\n            }\r\n        }\r\n\r\n        //此处是附件1债委会季度报表表1特制检测条件\r\n        if ((textHandlingDataMap.get(\"实际控制人\") == \"\"|| textHandlingDataMap.get(\"实际控制人\") == null) && item.get(\"企业性质\") == \"民营\"){\r\n            importLogErrResultList.add(ImportLogErrResultGenerator.textNoNullFormatErr(rowNum,\"实际控制人\",item.get(\"债委会名称\"),textHandlingDataMap.get(\"实际控制人\")));\r\n        }\r\n        return textHandlingDataMap;\r\n    }\r\n\r\n    def hasDebtComAndOrg(Integer rowNum,Map<String, Object> textHandlingDataMap,StringBuilder out,Model model){\r\n        //查询该债委会是否存在，若不存在，放到out中，提示用户该债委会不存在\r\n        //查询是否存在sql注入\r\n        boolean hasSqlInjection = containsSqlInjection(textHandlingDataMap.get(\"债委会名称\")) && containsSqlInjection(textHandlingDataMap.get(\"单位名称\"))\r\n\r\n        LoginUser loginUser = groovyService.getCurrLoginUser();\r\n\r\n        //如果hasSqlInjection返回为true，说明存在sql注入等非法字符\r\n        if (!hasSqlInjection) {\r\n            //拼接查询sql\r\n            String findDebtCommitteeSql = \"SELECT count(t0.债委会名称) as 债委会数量 FROM \"+ model.getModelName() +\" t0 WHERE t0.债委会名称 = \'\" + textHandlingDataMap.get(\"债委会名称\")+\"\'\";\r\n            List<ConcurrentHashMap> hasDebtCommittee = groovyService.genericSelectSql(findDebtCommitteeSql);\r\n\r\n            //这里是验证单位是否存在\r\n            List<Organization> hasOrganization = groovyService.findOrganizationsWithIdNameByName(textHandlingDataMap.get(\"单位名称\"));;\r\n\r\n            //这里是验证债委会名称是否存在\r\n            if (hasDebtCommittee.get(0).get(\"债委会数量\")>0){\r\n                //这里是验证单位是否存在\r\n                if (hasOrganization.size() > 0){\r\n                    if (loginUser.getCurrentOrganization().getName() != hasOrganization.get(0).getName()){\r\n                        out.append(\"第\").append(rowNum).append(\"行，名称为：\").append(textHandlingDataMap.get(\"单位名称\")).append(\" 的单位不是\").append(loginUser.getCurrentOrganization().getName()).append(\"，请检查!\\n\");\r\n                    }\r\n                }else{\r\n                    out.append(\"第\").append(rowNum).append(\"行，名称为：\").append(textHandlingDataMap.get(\"单位名称\")).append(\" 的单位不存在，请联系银行业协会管理员添加单位\\n\");\r\n                }\r\n            }else {\r\n                out.append(\"第\").append(rowNum).append(\"行，\");\r\n                textHandlingDataMap.get(\"债委会名称\") == null ? out.append(\"债委会名称为空，请检查！\\n\") :\r\n                        out.append(\"名称为：\")\r\n                                .append(textHandlingDataMap.get(\"债委会名称\"))\r\n                                .append(\" 的债委会不在报表中，请联系银保监局填报管理员重新创建该季度的填报\\n\");\r\n            }\r\n        } else {\r\n            out.append(\"第\").append(rowNum).append(\"行，债委会名称为：\")\r\n                    .append(textHandlingDataMap.get(\"债委会名称\"))\r\n                    .append(\"或单位名称为：\").append(textHandlingDataMap.get(\"单位名称\"))\r\n                    .append(\"存在非法字符，请检查！\\n\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 用于处理联系方式，由于Excel的导入服务将电话号码识别为Double，所以需要转换\r\n     * @param obj\r\n     * @return\r\n     */\r\n    def checkPhoneNumber(Object obj){\r\n        if (obj!=null && obj!=\"\") {\r\n            if (obj.getClass() == String.class) {\r\n                obj = obj as String;\r\n                if (!obj.contains(\"-\")) {\r\n                    obj = obj.trim().replaceAll(\" \",\"-\");\r\n                    obj = obj.contains(\"/\") ? obj.substring(0,obj.indexOf(\"/\")) : (obj.contains(\"\\\\\") ? obj.substring(0,obj.indexOf(\"\\\\\")) : obj);\r\n                    return obj;\r\n                }else {\r\n                    return obj\r\n                }\r\n            }else if(obj.class.getSuperclass() == Number.class){\r\n                String tempStr = obj as String;\r\n                DecimalFormat df = tempStr.length() > 8 ? new DecimalFormat(\"#0000000000\") : new DecimalFormat(\"#0000000\");\r\n                double d = Double.valueOf(obj as Double)\r\n                return df.format(d);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理小数，只读小数的方法\r\n     * @param item 表格的一行数据\r\n     * @param model 模型\r\n     * @param importLogErrResultList 收集错误的链表\r\n     * @param out 输出到屏幕的输出\r\n     * @return 返回处理后的map\r\n     */\r\n    def decimalHandling(Integer rowNum,Map<String, Object> item, Model model, List<ImportLogErrResult> importLogErrResultList, StringBuilder out){\r\n        //用一个map来存储过滤后得到的数据\r\n        Map<String,Object> decimalHandlingDataMap = new HashMap<>();\r\n\r\n        Set<String> keys = item.keySet();\r\n        for (String i : keys){\r\n            if (!\"行号\".equals(i)) {\r\n                if (model.getModelItemsMap().get(i).getModelDataTypeId() == 6 || model.getModelItemsMap().get(i).getModelDataTypeId() == 11){\r\n                    decimalHandlingDataMap.put(i,item.get(i));\r\n                }\r\n            }\r\n        }\r\n\r\n        //处理小数数值\r\n        Set<String> filterKeys = decimalHandlingDataMap.keySet();\r\n        for (String f : filterKeys){\r\n            Object obj = decimalHandlingDataMap.get(f);\r\n\r\n            //根据数据库中模型项判断此字段是否可以为空，若不能为空但导入数据却为空，则需要错误提示\r\n            if (!model.getModelItemsMap().get(f).canNull() && obj == null){\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.textNoNullFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                continue;\r\n            }\r\n\r\n            if (obj!=null) {\r\n                if (obj.class.getSuperclass() == Number.class){\r\n                    Object value = dynamicDecimalDigits(model.getModelItemsMap().get(f).getDigits(),obj);\r\n                    decimalHandlingDataMap.put(f,value);\r\n                }else {\r\n                    String str = (String)obj;\r\n                    boolean isNumber = NumberUtil.isNumber(StringUtils.remove(str,\"\\\\s\"));\r\n                    if (!isNumber){\r\n                        importLogErrResultList.add(ImportLogErrResultGenerator.numberFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,str));\r\n                        //当出现数据有误时，将数据置为null\r\n                        decimalHandlingDataMap.put(f,null);\r\n                    }\r\n                }\r\n            }else{\r\n                if (!model.getModelItemsMap().get(f).canNull()){\r\n                    importLogErrResultList.add(ImportLogErrResultGenerator.numberFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                }\r\n                decimalHandlingDataMap.put(f,null);\r\n            }\r\n        }\r\n\r\n        //此处是特殊的验证，验证全口径融资余额是否等于辖内加辖外\r\n//        if (decimalHandlingDataMap.get(\"债委会成员企业情况_全口径融资余额万元\") && decimalHandlingDataMap.get(\"债委会成员企业情况_全口径融资余额万元\") && decimalHandlingDataMap.get(\"债委会成员企业情况_全口径融资余额万元\"))\r\n\r\n        return decimalHandlingDataMap;\r\n    }\r\n\r\n    /**\r\n     * 动态设置小数位数\r\n     * @param digits 小数位数\r\n     * @param value 需要格式化的值\r\n     * @return 返回处理后的值\r\n     */\r\n    def dynamicDecimalDigits(Integer digits,Object value){\r\n        StringBuilder str = digits == 0 ? new StringBuilder(\"0\") : new StringBuilder(\"0.\");\r\n        for (int i = 0; i < digits;i++){\r\n            str.append(\"0\")\r\n        }\r\n        DecimalFormat df = new DecimalFormat(str.toString());\r\n        return Double.valueOf(df.format(value));\r\n    }\r\n\r\n\r\n    /**\r\n     * 处理整数，只读整数的方法\r\n     * @param item 表格的一行数据\r\n     * @param model 模型\r\n     * @param importLogErrResultList 收集错误的链表\r\n     * @param out 输出到屏幕的输出\r\n     * @return 返回处理后的map\r\n     */\r\n    def integerHandling(Integer rowNum, Map<String, Object> item, Model model, List<ImportLogErrResult> importLogErrResultList, StringBuilder out){\r\n\r\n        Map<String,Object> doubleHandlingDataMap = new HashMap<>();\r\n\r\n        //将对应条件的值装入map\r\n        Set<String> keys = item.keySet();\r\n        for (String i : keys){\r\n            if (!\"行号\".equals(i)) {\r\n                if (model.getModelItemsMap().get(i).getModelDataTypeId() == 17 || model.getModelItemsMap().get(i).getModelDataTypeId() == 18){\r\n                    doubleHandlingDataMap.put(i,item.get(i));\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        //这里是特殊的验证，已写死\r\n        if (doubleHandlingDataMap.get(\"债委会成员企业情况_成员企业个人数量\")!=null) {\r\n            //处理表间验证\r\n            String sql = \"SELECT count(关联企业名称) as 数量 FROM `附件1_2债委会关联企业明细表子表` WHERE 债委会名称 = \'\"+item.get(\"债委会名称\")+\"\' AND 单位名称 = \'\"+item.get(\"单位名称\")+\"\' AND `是否纳入债委会` = \'是\'  \" +\r\n                    \" AND 填报项目编号 = \" +\r\n                    \" (SELECT t1.eid FROM dcm_bill_project t0,dcm_bill_project t1 WHERE t0.eid = \"+ item.get(\"填报项目编号\") +\" and t0.period = t1.period AND t0.year = t1.year and t1.model_name = \'附件1_2债委会关联企业明细表\')\"\r\n\r\n            List<ConcurrentHashMap> selectData = groovyService.genericSelectSql(sql);\r\n            Integer count = selectData.get(0).get(\"数量\") as Integer;\r\n\r\n            if (doubleHandlingDataMap.get(\"债委会成员企业情况_成员企业个人数量\")!=count){\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.specialErrForAnnex1(item.get(\"行号\"),\"债委会成员企业情况_成员企业个人数量\", item.get(\"债委会名称\") as String,doubleHandlingDataMap.get(\"债委会成员企业情况_成员企业个人数量\")));\r\n            }\r\n        }\r\n\r\n\r\n        Set<String> filterKeys = doubleHandlingDataMap.keySet();\r\n        for (String f : filterKeys){\r\n            Object obj = doubleHandlingDataMap.get(f);\r\n\r\n            //根据数据库中模型项判断此字段是否可以为空，若不能为空但导入数据却为空，则需要错误提示\r\n            if (!model.getModelItemsMap().get(f).canNull() && obj == null){\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.textNoNullFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                continue;\r\n            }\r\n\r\n            if (obj!=null) {\r\n                if (obj.class.getSuperclass() == Number.class){\r\n                    Object value = dynamicDecimalDigits(model.getModelItemsMap().get(f).getDigits(),obj);\r\n                    doubleHandlingDataMap.put(f,value);\r\n                }else {\r\n                    String str = (String)obj;\r\n                    boolean isNumber = NumberUtil.isNumber(StringUtils.remove(str,\"\\\\s\"));\r\n                    if (!isNumber){\r\n                        importLogErrResultList.add(ImportLogErrResultGenerator.numberFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,str));\r\n                        //当出现数据有误时，将数据置为null\r\n                        doubleHandlingDataMap.put(f,null);\r\n                    }\r\n                }\r\n            }else{\r\n                if (!model.getModelItemsMap().get(f).canNull()){\r\n                    importLogErrResultList.add(ImportLogErrResultGenerator.numberFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                }\r\n                doubleHandlingDataMap.put(f,null);\r\n            }\r\n        }\r\n\r\n        return doubleHandlingDataMap;\r\n    }\r\n\r\n    /**\r\n     * 处理时间日期选择器，日期选择器，时间选择器的方法\r\n     * @param item 表格的一行数据\r\n     * @param model 模型\r\n     * @param importLogErrResultList 收集错误的链表\r\n     * @param out 输出到屏幕的输出\r\n     * @return 返回处理后的map\r\n     */\r\n    def timeHandling(Integer rowNum,Map<String, Object> item,Model model,List<ImportLogErrResult> importLogErrResultList,StringBuilder out){\r\n        //用一个map来存储过滤后得到的数据\r\n        Map<String,Object> timeHandlingDataMap = new HashMap<>();\r\n\r\n        Set<String> keys = item.keySet();\r\n        for (String i : keys){\r\n            if (!\"行号\".equals(i)) {\r\n                if (model.getModelItemsMap().get(i).getModelDataTypeId() == 7 || model.getModelItemsMap().get(i).getModelDataTypeId() == 8 || model.getModelItemsMap().get(i).getModelDataTypeId() == 9){\r\n                    timeHandlingDataMap.put(i,item.get(i));\r\n                }\r\n            }\r\n        }\r\n\r\n        Set<String> filterKeys = timeHandlingDataMap.keySet();\r\n        for (String f : filterKeys){\r\n            Object obj = timeHandlingDataMap.get(f);\r\n\r\n            //根据数据库中模型项判断此字段是否可以为空，若不能为空但导入数据却为空，则需要错误提示\r\n            if (!model.getModelItemsMap().get(f).canNull() && obj == null){\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.textNoNullFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                continue;\r\n            }\r\n\r\n            if (obj.getClass() == String.class){\r\n                Date d = DateUtil.parseDate((obj as String).trim());\r\n\r\n                if (d!=null){\r\n\r\n\r\n\r\n                    if(d > Mysql5_7Info.MAX_DATE){\r\n                        //填充错误信息,并且将原来的值置为null\r\n                        importLogErrResultList.add(ImportLogErrResultGenerator.dateSizeErr(item.get(\"行号\"),f,item.get(\"债委会名称\"),obj))\r\n                        timeHandlingDataMap.put(f,null);\r\n                    }else {\r\n                        timeHandlingDataMap.put(f,d);\r\n                    }\r\n\r\n\r\n\r\n                }else {\r\n\r\n\r\n                    //填充错误信息,并且将原来的值置为null\r\n                    importLogErrResultList.add(ImportLogErrResultGenerator.dateFormatErr(item.get(\"行号\"),f,item.get(\"债委会名称\"),obj))\r\n                    timeHandlingDataMap.put(f,null);\r\n\r\n\r\n\r\n                }\r\n\r\n            }else if (obj.getClass() == Date.class){\r\n\r\n\r\n                if(obj > Mysql5_7Info.MAX_DATE){\r\n                    //填充错误信息,并且将原来的值置为null\r\n                    importLogErrResultList.add(ImportLogErrResultGenerator.dateSizeErr(item.get(\"行号\"),f,item.get(\"债委会名称\"),obj))\r\n                    timeHandlingDataMap.put(f,null);\r\n                }\r\n\r\n\r\n            }else{\r\n                //填充错误信息,并且将原来的值置为null\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.dateFormatErr(item.get(\"行号\"),f,item.get(\"债委会名称\"),obj))\r\n                timeHandlingDataMap.put(f,null);\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        return timeHandlingDataMap;\r\n    }\r\n\r\n    /**\r\n     * 处理下拉框的方法\r\n     * @param item 表格的一行数据\r\n     * @param model 模型\r\n     * @param importLogErrResultList 收集错误的链表\r\n     * @param out 输出到屏幕的输出\r\n     * @return 返回处理后的map\r\n     */\r\n    def dropdownHandling(Integer rowNum,Map<String, Object> item,Model model,List<ImportLogErrResult> importLogErrResultList,StringBuilder out){\r\n\r\n        //用一个map来存储过滤后得到的数据\r\n        Map<String,Object> dropdownHandlingDataMap = new HashMap<>();\r\n\r\n        Set<String> keys = item.keySet();\r\n        for (String i : keys){\r\n            if (!\"行号\".equals(i)) {\r\n                if (model.getModelItemsMap().get(i).getModelDataTypeId() == 5){\r\n                    dropdownHandlingDataMap.put(i,item.get(i));\r\n                }\r\n            }\r\n        }\r\n\r\n        //将可选项不为空的模型项分离出来\r\n        List<ModelItem> verifyModelItem = model.getModelItemsMap().entrySet().stream()\r\n                .map({ e -> e.getValue()})\r\n                .filter({ e -> e.getOptions() != null && e.getOptions() != \"\" })\r\n                .collect(Collectors.toList());\r\n\r\n        //将获取到的链表转换成map\r\n        Map<String,List<String>> verifyModelItemMap = new ConcurrentHashMap<>();\r\n        for (ModelItem i : verifyModelItem){\r\n            verifyModelItemMap.put(i.getSpliceModelItemName(), Arrays.asList(i.getOptions().split(\"[\\\\f\\\\n\\\\r]\")));\r\n        }\r\n\r\n        Set<String> filterKeys = dropdownHandlingDataMap.keySet();\r\n        for (String f : filterKeys){\r\n            Object obj = dropdownHandlingDataMap.get(f);\r\n\r\n            //根据数据库中模型项判断此字段是否可以为空，若不能为空但导入数据却为空，则需要错误提示\r\n            if (!model.getModelItemsMap().get(f).canNull() && obj == null){\r\n                importLogErrResultList.add(ImportLogErrResultGenerator.textNoNullFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                continue;\r\n            }\r\n\r\n            if (obj!=null) {\r\n                if (verifyModelItemMap.get(f)!=null) {\r\n                    if (!verifyModelItemMap.get(f).contains(dropdownHandlingDataMap.get(f))){\r\n                        //此处错误信息需要根据不同表格进行制定\r\n                        importLogErrResultList.add(ImportLogErrResultGenerator.dropdownFormatErr(item.get(\"行号\"),f,item.get(\"债委会名称\"),obj))\r\n                    }\r\n                } else {\r\n                    //这个地方需要考虑是否要添加错误信息\r\n                    out.append(\"请联系银保监局填报管理员设置:\").append(f).append(\"的选项值，此处数据仍会导入。\\n\")\r\n                }\r\n            }else{\r\n                if (!model.getModelItemsMap().get(f).canNull()){\r\n                    importLogErrResultList.add(ImportLogErrResultGenerator.numberFormatErr(item.get(\"行号\"),f, item.get(\"债委会名称\") as String,null));\r\n                }\r\n                dropdownHandlingDataMap.put(f,null);\r\n            }\r\n        }\r\n\r\n\r\n        return dropdownHandlingDataMap;\r\n    }\r\n\r\n    /**\r\n     * 是否含有sql注入，返回true表示含有\r\n     * @param obj\r\n     * @return\r\n     */\r\n    def containsSqlInjection(Object obj){\r\n        Pattern pattern= Pattern.compile(\"\\\\b(and|exec|insert|select|drop|grant|alter|delete|update|count|chr|mid|master|truncate|char|declare|or)\\\\b|(\\\\*|;|\\\\+|\'|%)\");\r\n        Matcher matcher=pattern.matcher(obj.toString());\r\n        return matcher.find();\r\n    }\r\n}\r\n');
